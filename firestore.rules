/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * public read access for product information, and admin-restricted write access
 * to product data. Administrative privileges are granted based on the existence
 * of a document in the `roles_admin` collection.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by a user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Documents indicating admin privileges; existence grants admin rights.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the authenticated user can access their profile,
 *   shopping carts, cart items, and orders.
 * - Product data is publicly readable, enabling open access for browsing.
 * - Write access to product data is restricted to admins.
 * - Admin privileges are determined by the existence of a document in the /roles_admin/{uid} collection.
 * - Listing of user documents or admin roles is not permitted to prevent enumeration.
 *
 * Denormalization for Authorization:
 * - The `roles_admin/{uid}` collection allows direct checking of admin status without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user's ID.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user's ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId The user's ID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile with matching ID.
     *     auth.uid: 'user123', request.resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a profile for user 'otherUser'.
     *     auth.uid: 'user123', request.resource.data.id: 'otherUser'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products. Publicly readable, admin-writeable.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     *     auth.uid: 'anyUser'
     * @allow (create) Admin creates a new product.
     *     auth.uid: 'adminUser', roles_admin/adminUser exists
     * @deny (create) Non-admin attempts to create a product.
     *     auth.uid: 'normalUser', roles_admin/normalUser does not exist
     * @principle Enforces admin-only writes, public reads.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with ID 'user123' creates a cart under their profile.
     *     auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a cart under 'otherUser' profile.
     *     auth.uid: 'user123'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items within a shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with ID 'user123' creates a cart item in their cart.
     *     auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a cart item in 'otherUser' cart.
     *     auth.uid: 'user123'
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' creates an order under their profile.
     *     auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create an order under 'otherUser' profile.
     *     auth.uid: 'user123'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @principle No ownership so no user restriction
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @principle No ownership so no user restriction
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;
      allow create: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for admin roles. Existence of a document grants admin rights.
     * @path /roles_admin/{uid}
     * @allow (get) Admin with ID 'admin123' can read their own admin role document.
     *     auth.uid: 'admin123', roles_admin/admin123 exists
     * @deny (get) Non-admin attempts to read an admin role document.
     *     auth.uid: 'normalUser', roles_admin/normalUser does not exist
     *  @deny (list) Nobody can list admin roles.
     * @principle Indicates administrative privileges; existence of a document grants admin rights.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn() && request.auth.uid == uid;
      allow list: if false;
      allow create: if false;
      allow update: if false && resource != null;
      allow delete: if false && resource != null;
    }
  }
}