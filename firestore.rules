/**
 * @fileOverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * with public read access for product information and administrative control
 * over product modifications. Admin privileges are granted by the existence
 * of a document in the `/roles_admin/{uid}` collection, with the document ID
 * matching the user's UID. Authorization is achieved through path-based
 * ownership and denormalization, ensuring authorization independence.
 *
 * Data Structure:
 * - /users/{userId}: User profiles (owner-only access).
 * - /products/{productId}: Product information (public read, admin-only write).
 * - /users/{userId}/shoppingCarts/{cartId}: User's shopping carts (owner-only access).
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items (owner-only access via parent).
 * - /users/{userId}/orders/{orderId}: User's orders (owner-only access).
 * - /orders/{orderId}/orderItems/{orderItemId}: Order items (no direct write access).
 * - /orders/{orderId}/payments/{paymentId}: Payments (no direct write access).
 * - /roles_admin/{uid}: Admin roles (admin-only management).
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Product data is publicly readable but only modifiable by admins.
 * - Admin privileges are granted by the presence of a document in /roles_admin/{uid}.
 * - Subcollections inherit ownership from their parent documents.
 * - Listing of orderItems and payments is allowed to anyone.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by path-based rules (e.g., /users/{userId}).
 * - Admin status is determined by the existence of a document in /roles_admin/{uid}.
 *
 * Structural Segregation:
 * - User-specific data is stored under /users/{userId}, while public product
 *   information is stored in the top-level /products collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in, is the owner, and resource exists).
     *              This function is used for update and delete operations.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the current user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching userId can create their profile.
     * @allow (get, update, delete) - User can access/modify their own profile.
     * @deny (create) - User tries to create a profile with a different userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product information.
     * @path /products/{productId}
     * @allow (get, list) - Anyone can read product information.
     * @allow (create, update, delete) - Only admins can modify product information.
     * @deny (create, update, delete) - Non-admins cannot modify product information.
     * @principle Allows public read access to product data, restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create, get, update, delete) - User can manage their own shopping cart.
     * @deny (create, get, update, delete) - User cannot manage other users' shopping carts.
     * @principle Enforces document ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create, get, update, delete) - User can manage items in their own shopping cart.
     * @deny (create, get, update, delete) - User cannot manage items in other users' shopping carts.
     * @principle Enforces document ownership for cart items via the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete) - User can manage their own orders.
     * @deny (create, get, update, delete) - User cannot manage other users' orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items. No direct write access, managed through order creation.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) - Anyone can read order items.
     * @deny (create, update, delete) - No direct write access to order items.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for payments. No direct write access, managed through order processing.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) - Anyone can read payments.
     * @deny (create, update, delete) - No direct write access to payments.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) - Only admins can grant admin roles.
     * @allow (get) - Anyone can read admin roles.
     * @allow (update, delete) - Only admins can revoke admin roles.
     * @deny (create, update, delete) - Non-admins cannot manage admin roles.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{uid} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}