/**
 * @file Firestore Security Rules for Primavera Delivery Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data,
 * public read access with admin-only writes for product data,
 * and role-based access control for administrative functions.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Documents indicating administrative privileges.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Product data is publicly readable but only modifiable by admins.
 * - Admin privileges are granted by the presence of a document in /roles_admin/{uid}.
 * - Data validation is relaxed in this prototyping phase, focusing on access control.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced through path-based rules (e.g., /users/{userId}), avoiding the need for data denormalization within documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     *              Combines the ownership check with the existence check.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin based on the presence of a document in /roles_admin/{uid}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile when authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their profile when authenticated as 'user123'.
     * @deny (update) User with ID 'user456' cannot update profile 'user123' when authenticated as 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get) Any user can read any product.
     * @allow (list) Any user can list products.
     * @allow (create) An admin can create a product.
     * @deny (create) A non-admin user cannot create a product.
     * @principle Public read, admin-only writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with ID 'user123' can create a cart for themselves when authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their cart when authenticated as 'user123'.
     * @deny (update) User with ID 'user456' cannot update cart 'cart123' for user 'user123' when authenticated as 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with ID 'user123' can create a cart item in their cart when authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read a cart item in their cart when authenticated as 'user123'.
     * @deny (update) User with ID 'user456' cannot update a cart item in cart 'cart123' for user 'user123' when authenticated as 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order for themselves when authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their order when authenticated as 'user123'.
     * @deny (update) User with ID 'user456' cannot update order 'order123' for user 'user123' when authenticated as 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     *  Note: OrderItems are not user-owned so we cannot enforce user-level security in the path.
     *  A higher-level rule or denormalized user info would be needed for proper user access control.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if true;  // WARNING: Potentially insecure, requires higher-level access control.
      allow list: if true; // WARNING: Potentially insecure, requires higher-level access control.
      allow create: if false; // TODO: Add a role-based check or path-based ownership verification here
      allow update: if false; // TODO: Add a role-based check or path-based ownership verification here
      allow delete: if false; // TODO: Add a role-based check or path-based ownership verification here
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     *  Note: Payments are not user-owned so we cannot enforce user-level security in the path.
     *  A higher-level rule or denormalized user info would be needed for proper user access control.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if true;  // WARNING: Potentially insecure, requires higher-level access control.
      allow list: if true; // WARNING: Potentially insecure, requires higher-level access control.
      allow create: if false; // TODO: Add a role-based check or path-based ownership verification here
      allow update: if false; // TODO: Add a role-based check or path-based ownership verification here
      allow delete: if false; // TODO: Add a role-based check or path-based ownership verification here
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) Only the system can create admin documents (e.g., via a Cloud Function).  Clients cannot directly grant admin access.
     * @allow (get) Any authenticated user can check if they are an admin.
     * @principle Role-based access control.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; // Only the backend should be able to create admin roles
      allow update: if false; // No client-side updates allowed
      allow delete: if false; // No client-side deletions allowed
    }
  }
}