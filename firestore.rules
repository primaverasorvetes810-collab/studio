/**
 * @file Firebase Security Rules for Primavera Delivery Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 * and role-based access control for administrative functions. Public read access is granted
 * for product information. The rules are designed to prevent unauthorized data access and
 * modification, ensuring data integrity and user privacy.
 *
 * @data_structure
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /products/{productId}: Product information, publicly readable but write-protected.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a specific user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within a specific order.
 * - /orders/{orderId}/payments/{paymentId}: Payments made for a specific order.
 * - /roles_admin/{uid}: Documents that, when present, grant admin rights to the user with the matching UID.
 *
 * @key_security_decisions
 * - User data is strictly owned and only accessible by the authenticated user.
 * - Product data is publicly readable to facilitate browsing without authentication.
 * - Admin privileges are granted based on the existence of a document in the `/roles_admin/{uid}` collection.
 * - Data validation is limited to authorization-critical fields to allow for flexible data shapes during prototyping.
 * - Listing all documents in the database is denied at the root level to prevent information leakage.
 *
 * @denormalization_for_authorization
 * - Ownership is enforced through path-based rules (e.g., `/users/{userId}`), avoiding the need for `get()` calls to verify ownership.
 * - Admin status is determined by the presence of a document in the `/roles_admin` collection, allowing for a simple `exists()` check in the rules.
 *
 * @structural_segregation
 * - User-specific data (profiles, carts, orders) is stored under the `/users/{userId}` collection, while public product information is stored at the top level in `/products/{productId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all documents at the root level.
     * @path /databases/{database}/documents
     * @allow None - Listing all documents is not permitted.
     * @deny list: Always.
     * @principle Prevents unauthorized enumeration of all documents in the database.
     */
    match /{document=**} {
      allow list: if false;
    }

    /**
     * @description Manages user profiles. Only the user can access their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get, update, delete) Authenticated user with UID 'user123' can access their own profile.
     * @deny (create, update, delete) Authenticated user with UID 'user456' cannot access 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages product information. Publicly accessible for reading, only admins can write.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @allow (create, update, delete) Only admins can modify product information.
     * @deny (create, update, delete) Non-admin users cannot modify product information.
     * @principle Allows public read access for products, restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages shopping carts for each user. Only the user can access their cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with ID 'user123' can create a cart for themselves.
     * @allow (get, update, delete) Authenticated user with UID 'user123' can access their own shopping cart.
     * @deny (create, update, delete) Authenticated user with UID 'user456' cannot access 'user123' shopping cart.
     * @principle Enforces document ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages cart items within a shopping cart. Inherits ownership from the parent shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with ID 'user123' can add items to their own cart.
     * @allow (get, update, delete) Authenticated user with UID 'user123' can manage items in their own cart.
     * @deny (create, update, delete) Authenticated user with UID 'user456' cannot manage items in 'user123' cart.
     * @principle Enforces document ownership for cart items, inheriting from the shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages orders for each user. Only the user can access their orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order for themselves.
     * @allow (get, update, delete) Authenticated user with UID 'user123' can access their own orders.
     * @deny (create, update, delete) Authenticated user with UID 'user456' cannot access 'user123' orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) Read access if the user is an admin
     * @allow (create, update, delete) Only admins can modify order items
     * @deny (create, update, delete) Non-admin users cannot modify order items.
     * @principle Admin-only access for order items.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) Read access if the user is an admin
     * @allow (create, update, delete) Only admins can modify payments
     * @deny (create, update, delete) Non-admin users cannot modify payments.
     * @principle Admin-only access for payments.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants administrative privileges based on the existence of a document.
     * @path /roles_admin/{uid}
     * @allow (get, create, update, delete) Only admins can manage admin roles.
     * @deny (get, create, update, delete) Non-admin users cannot modify admin roles.
     * @principle Role-based access control for granting admin privileges.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // ----- Helper Functions -----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of an admin role document.
     * @return True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}