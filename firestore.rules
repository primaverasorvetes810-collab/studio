/**
 * @fileOverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * with public read access for product information and admin-restricted write access.
 * Administrative privileges are granted based on the existence of a document in the /roles_admin/{uid} collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can access their data.
 * - /products/{productId}: Stores product information. Publicly accessible for reading, write access is restricted to admins.
 * - /users/{userId}/shoppingCarts/{cartId}: Stores shopping carts for each user. Path-based ownership ensures only the user can access their cart.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Stores cart items within a shopping cart. Inherits ownership from the parent shopping cart.
 * - /users/{userId}/orders/{orderId}: Stores order information for each user. Path-based ownership ensures only the user can access their orders.
 * - /orders/{orderId}/orderItems/{orderItemId}: Stores order items within an order. The order id is necessary for querying orderItems.
 * - /orders/{orderId}/payments/{paymentId}: Stores payments associated with an order. The order id is necessary for querying payments.
 * - /roles_admin/{uid}: Indicates administrative privileges. Existence of a document grants admin rights.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted for product information to allow for easy browsing.
 * - Write access to product information is restricted to admins.
 * - Existence of document at `/roles_admin/{uid}` indicates admin status.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced via path-based rules (e.g., /users/{userId}/...).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * Used for update and delete operations.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     *   request.auth.uid = 'user123'
     *   request.resource.data.id = 'user123'
     * @deny (create) User with UID 'user123' cannot create a profile with ID 'user456'.
     *   request.auth.uid = 'user123'
     *   request.resource.data.id = 'user456'
     * @principle Enforces document ownership and relational integrity for user profiles.
     */
    match /users/{userId} {
      // Users can only create their own profile
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Users can only read their own profile
      allow get: if isOwner(userId);
      // Users can only update their own profile and the id field is immutable
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Users can only delete their own profile
      allow delete: if isExistingOwner(userId);
      // Listing users is not allowed.
      allow list: if false;
    }

    /**
     * @description Rules for product information.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @allow (create) Admin user can create product information.
     * @deny (create) Non-admin user cannot create product information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /products/{productId} {
      // Anyone can read product information
      allow get, list: if true;
      // Only admins can create, update, or delete product information
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with UID 'user123' can create a shopping cart.
     *   request.auth.uid = 'user123'
     * @deny (create) User with UID 'user123' cannot create a shopping cart for 'user456'.
     *   request.auth.uid = 'user123'
     * @principle Enforces path-based ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      // Only the user can create, read, update, or delete their own shopping cart
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with UID 'user123' can create a cart item in their shopping cart.
     *   request.auth.uid = 'user123'
     * @deny (create) User with UID 'user123' cannot create a cart item in another user's shopping cart.
     *   request.auth.uid = 'user123'
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      // Only the user can create, read, update, or delete their own cart items
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with UID 'user123' can create an order.
     *   request.auth.uid = 'user123'
     * @deny (create) User with UID 'user123' cannot create an order for 'user456'.
     *   request.auth.uid = 'user123'
     * @principle Enforces path-based ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      // Only the user can create, read, update, or delete their own orders
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @principle No user-level ownership, so defaulting to no access for prototyping purposes.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      // No one can create, read, update, or delete order items.
      allow create: if false;  // TODO: Define appropriate access control for order items.
      allow get: if false;  // TODO: Define appropriate access control for order items.
      allow update: if false; // TODO: Define appropriate access control for order items.
      allow delete: if false; // TODO: Define appropriate access control for order items.
      allow list: if false; // TODO: Define appropriate access control for order items.
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     * @principle No user-level ownership, so defaulting to no access for prototyping purposes.
     */
    match /orders/{orderId}/payments/{paymentId} {
      // No one can create, read, update, or delete payments.
      allow create: if false;  // TODO: Define appropriate access control for payments.
      allow get: if false;  // TODO: Define appropriate access control for payments.
      allow update: if false; // TODO: Define appropriate access control for payments.
      allow delete: if false; // TODO: Define appropriate access control for payments.
      allow list: if false; // TODO: Define appropriate access control for payments.
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) User with UID 'admin123' can create their admin role.
     *   request.auth.uid = 'admin123'
     *   request.resource.data.id = 'admin123'
     * @deny (create) User with UID 'user123' cannot create an admin role for 'admin456'.
     *   request.auth.uid = 'user123'
     *   request.resource.data.id = 'admin456'
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{uid} {
      // Only the user themselves can create their admin role entry.
      allow create: if isSignedIn() && request.auth.uid == uid;
      // Admins can read their own role.
      allow get: if isSignedIn() && request.auth.uid == uid;
      // Nobody can update the roles document (must delete and recreate).
      allow update: if false;
      // Admins can delete their own role.
      allow delete: if isSignedIn() && request.auth.uid == uid;
      // Nobody can list the roles.
      allow list: if false;
    }
  }
}