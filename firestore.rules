/**
 * @file Firestore Security Rules for Primavera Delivery Application
 * @corePhilosophy This ruleset enforces a hybrid security model: user-ownership for personal data (profiles, carts, orders), public read access with admin-only writes for product catalog data, and role-based access for administrative functions.
 * @dataStructure The database is structured with user-specific data nested under `/users/{userId}`. Product catalog data is stored in top-level collections (`/productGroups`, `/products`). Administrative roles are stored in the `/roles_admin/{uid}` collection.
 * @keySecurityDecisions
 *   - User data is strictly controlled by the owning user.
 *   - Product catalog data is publicly readable to facilitate browsing but can only be modified by administrators.
 *   - Listing of all users is explicitly denied for privacy.
 *   - Administrative privileges are granted based on the existence of a document in the `/roles_admin/{uid}` collection.
 * @denormalizationForAuthorization The rules leverage path-based authorization (e.g., `/users/{userId}`) and role-based authorization (checking for the existence of a document in `/roles_admin/{uid}`). No additional denormalization is required.
 * @structuralSegregation Public product catalog data is stored in top-level collections, separate from private user data. This avoids the need for complex filtering based on public/private flags and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in and the document exists, and if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the authenticated user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && resource != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the `/roles_admin/{uid}` collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /users/{userId} {
      /**
       * @description Manages user profiles. Only the user can access their data.
       * @path /users/{userId}
       * @allow (create) User with UID 'user123' creates their profile.
       *   - Request: `auth.uid = 'user123'`
       * @allow (get) User with UID 'user123' reads their profile.
       *   - Request: `auth.uid = 'user123'`
       * @allow (update) User with UID 'user123' updates their profile.
       *   - Request: `auth.uid = 'user123'`
       * @allow (delete) User with UID 'user123' deletes their profile.
       *   - Request: `auth.uid = 'user123'`
       * @deny (create) User with UID 'user456' attempts to create a profile for 'user123'.
       *   - Request: `auth.uid = 'user456'`
       * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly deny listing all users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    match /productGroups/{productGroupId} {
      /**
       * @description Manages product groups. Publicly readable, admin-only write access.
       * @path /productGroups/{productGroupId}
       * @allow (get) Any user reads a product group.
       *   - Request: `auth.uid = null` (anonymous user) or `auth.uid = 'anyUser'`
       * @allow (list) Any user lists product groups.
       *   - Request: `auth.uid = null` (anonymous user) or `auth.uid = 'anyUser'`
       * @allow (create) Admin user creates a product group.
       *   - Request: `auth.uid = 'adminUid'`, admin document exists in `/roles_admin/adminUid`
       * @deny (create) Non-admin user attempts to create a product group.
       *   - Request: `auth.uid = 'userUid'`, no document exists in `/roles_admin/userUid`
       * @principle Public read access with role-based write access.
       */
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /products/{productId} {
      /**
       * @description Manages products. Products are queried by their 'groupId'. Publicly readable, admin-only write access.
       * @path /products/{productId}
       * @allow (get) Any user reads a product.
       *   - Request: `auth.uid = null` (anonymous user) or `auth.uid = 'anyUser'`
       * @allow (list) Any user lists products.
       *   - Request: `auth.uid = null` (anonymous user) or `auth.uid = 'anyUser'`
       * @allow (create) Admin user creates a product.
       *   - Request: `auth.uid = 'adminUid'`, admin document exists in `/roles_admin/adminUid`
       * @deny (create) Non-admin user attempts to create a product.
       *   - Request: `auth.uid = 'userUid'`, no document exists in `/roles_admin/userUid`
       * @principle Public read access with role-based write access.
       */
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /users/{userId}/shoppingCarts/{cartId} {
      /**
       * @description Manages shopping carts for each user. Path-based ownership ensures only the user can access their cart.
       * @path /users/{userId}/shoppingCarts/{cartId}
       * @allow (create) User with UID 'user123' creates their shopping cart.
       *   - Request: `auth.uid = 'user123'`
       * @allow (get) User with UID 'user123' reads their shopping cart.
       *   - Request: `auth.uid = 'user123'`
       * @allow (update) User with UID 'user123' updates their shopping cart.
       *   - Request: `auth.uid = 'user123'`
       * @allow (delete) User with UID 'user123' deletes their shopping cart.
       *   - Request: `auth.uid = 'user123'`
       * @deny (create) User with UID 'user456' attempts to create a shopping cart for 'user123'.
       *   - Request: `auth.uid = 'user456'`
       * @principle Enforces document ownership for writes. Restricts access to a user's own shopping cart.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);

      match /cartItems/{cartItemId} {
        /**
         * @description Manages cart items within a shopping cart. Inherits ownership from the parent shopping cart.
         * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
         * @allow (create) User with UID 'user123' creates a cart item in their cart.
         *   - Request: `auth.uid = 'user123'`
         * @allow (get) User with UID 'user123' reads a cart item in their cart.
         *   - Request: `auth.uid = 'user123'`
         * @allow (update) User with UID 'user123' updates a cart item in their cart.
         *   - Request: `auth.uid = 'user123'`
         * @allow (delete) User with UID 'user123' deletes a cart item in their cart.
         *   - Request: `auth.uid = 'user123'`
         * @deny (create) User with UID 'user456' attempts to create a cart item in 'user123's cart.
         *   - Request: `auth.uid = 'user456'`
         * @principle Enforces document ownership inherited from the parent.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.shoppingCartId == cartId;
        allow update: if isExistingOwner(userId) && request.resource.data.shoppingCartId == resource.data.shoppingCartId;
        allow delete: if isExistingOwner(userId);
      }
    }

    match /users/{userId}/orders/{orderId} {
      /**
       * @description Manages order information for each user. Path-based ownership ensures only the user can access their orders.
       * @path /users/{userId}/orders/{orderId}
       * @allow (create) User with UID 'user123' creates their order.
       *   - Request: `auth.uid = 'user123'`
       * @allow (get) User with UID 'user123' reads their order.
       *   - Request: `auth.uid = 'user123'`
       * @allow (update) User with UID 'user123' updates their order.
       *   - Request: `auth.uid = 'user123'`
       * @allow (delete) User with UID 'user123' deletes their order.
       *   - Request: `auth.uid = 'user123'`
       * @deny (create) User with UID 'user456' attempts to create an order for 'user123'.
       *   - Request: `auth.uid = 'user456'`
       * @principle Enforces document ownership for writes. Restricts access to a user's own orders.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);

      match /orderItems/{orderItemId} {
        /**
         * @description Manages order items within an order.
         * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
         * @allow (create) User with UID 'user123' creates an order item in their order.
         *   - Request: `auth.uid = 'user123'`
         * @allow (get) User with UID 'user123' reads an order item in their order.
         *   - Request: `auth.uid = 'user123'`
         * @allow (update) User with UID 'user123' updates an order item in their order.
         *   - Request: `auth.uid = 'user123'`
         * @allow (delete) User with UID 'user123' deletes an order item in their order.
         *   - Request: `auth.uid = 'user123'`
         * @deny (create) User with UID 'user456' attempts to create an order item in 'user123's order.
         *   - Request: `auth.uid = 'user456'`
         * @principle Enforces document ownership inherited from the parent.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.orderId == orderId;
        allow update: if isExistingOwner(userId) && request.resource.data.orderId == resource.data.orderId;
        allow delete: if isExistingOwner(userId);
      }
    }

     match /orders/{orderId}/payments/{paymentId} {
        /**
         * @description Manages payments associated with an order.
         * @path /orders/{orderId}/payments/{paymentId}
         */
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin() && request.resource.data.orderId == orderId;
        allow update: if isAdmin() && resource != null && request.resource.data.orderId == resource.data.orderId;
        allow delete: if isAdmin() && resource != null;
      }


    match /roles_admin/{uid} {
      /**
       * @description Indicates administrative privileges. The document ID is the user's UID. Existence of a document grants admin rights.
       * @path /roles_admin/{uid}
       * @allow (create) Only a server-side process can create admin roles.  This rule only allows creating the document if the UID matches the document ID.
       *   - Request: `auth.uid = 'adminUid'`, the document ID is also 'adminUid'
       * @allow (get) Any authenticated user can check if they are an admin.
       *   - Request: `auth.uid = 'anyUser'`
       * @deny (create) User attempts to create their own admin role.
       *   - Request: `auth.uid = 'userUid'`
       * @principle Role-based access control.
       */
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if request.auth.uid == uid; // Only allow creation if the UID matches the document ID.  This should ideally be done via a trusted environment.
      allow update: if false;
      allow delete: if false;
    }
  }
}