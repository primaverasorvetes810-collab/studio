/**
 * @file Firestore Security Rules for Primavera Delivery
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data,
 *                  public read access for product information, and admin-only write access to products.
 *                  Administrative privileges are granted by the presence of a document in the
 *                  `/roles_admin/{uid}` collection.
 *
 * @data_structure The Firestore database is structured as follows:
 * - /users/{userId}: User profiles (owner-only access).
 * - /products/{productId}: Product information (public read, admin write).
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts (owner-only access).
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items (owner-only access).
 * - /users/{userId}/orders/{orderId}: Orders (owner-only access).
 * - /orders/{orderId}/orderItems/{orderItemId}: Order items (no specific access restrictions).
 * - /orders/{orderId}/payments/{paymentId}: Payments (no specific access restrictions).
 * - /roles_admin/{uid}: Admin roles (existence grants admin rights).
 *
 * @key_security_decisions
 * - User listing is disallowed for privacy.
 * - Admin privileges are determined by document existence in `/roles_admin/{uid}`.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * @denormalization_for_authorization The existence of a document in `/roles_admin/{uid}` is used to
 *                                    grant administrative privileges. This avoids the need for
 *                                    complex queries or separate role collections.
 *
 * @structural_segregation User-specific data is stored under /users/{userId} to ensure that only
 *                          the user can access their data. Products are stored globally in
 *                          /products to allow for public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile data if the userId matches their auth UID.
     * @deny (create) -  User 'otherUserId' cannot create a profile with userId 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @allow (create, update, delete) - Only admins can create, update, or delete product information.
     * @deny (create, update, delete) - Non-admin users cannot modify product information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) - Authenticated user can create their own shopping cart if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own shopping cart data if the userId matches their auth UID.
     * @deny (create) -  User 'otherUserId' cannot create a shopping cart with userId 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to cart items within a shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) - Authenticated user can create cart items in their own shopping cart if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access cart items in their own shopping cart if the userId matches their auth UID.
     * @deny (create) -  User 'otherUserId' cannot create a cart item in shopping cart with userId 'userId'.
     * @principle Enforces document ownership inherited from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create their own order if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own order data if the userId matches their auth UID.
     * @deny (create) -  User 'otherUserId' cannot create a order with userId 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) - Anyone can read order items
     * @allow (create, update, delete) - No write access restrictions.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
       allow get, list: if true;
       allow create, update, delete: if true;
    }

    /**
     * @description Controls access to payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) - Anyone can read payments
     * @allow (create, update, delete) - No write access restrictions.
     */
    match /orders/{orderId}/payments/{paymentId} {
       allow get, list: if true;
       allow create, update, delete: if true;
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{uid}
     * @allow get: if request.auth.uid == uid;
     * @allow list: if false;
     * @allow create: if request.auth.uid == uid;
     * @allow update: if false;
     * @allow delete: if request.auth.uid == uid && resource != null;
     * @principle Grants read and write access to the admin role document only to the user with the matching UID.
     */
    match /roles_admin/{uid} {
      allow get: if request.auth.uid == uid;
      allow list: if false;
      allow create: if request.auth.uid == uid;
      allow update: if false;
      allow delete: if request.auth.uid == uid && resource != null;
    }
  }
}