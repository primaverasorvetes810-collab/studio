/**
 * @file Firestore Security Rules for Primavera Delivery
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data (profiles, shopping carts, orders).
 * Products are publicly readable, but only admins can modify them. Administrative privileges are granted by the presence of a document
 * in the `/roles_admin/{uid}` collection.
 *
 * @data_structure The Firestore database is structured as follows:
 * - `/users/{userId}`: User profiles, accessible only by the user.
 * - `/products/{productId}`: Product information, publicly readable, admin-writeable.
 * - `/users/{userId}/shoppingCarts/{cartId}`: Shopping carts, accessible only by the user.
 * - `/users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}`: Cart items, accessible only by the user.
 * - `/users/{userId}/orders/{orderId}`: Orders, accessible only by the user.
 * - `/orders/{orderId}/orderItems/{orderItemId}`: Order items related to a specific order.
 * - `/orders/{orderId}/payments/{paymentId}`: Payments associated with a specific order.
 * - `/roles_admin/{uid}`: Admin role assignments. The existence of a document grants admin privileges.
 *
 * @key_security_decisions
 * - User data is strictly segregated and only accessible by the owning user.
 * - Product data is publicly readable to support browsing.
 * - Admin privileges are determined by the existence of a document in the `roles_admin` collection.
 * - List operations are generally allowed for user-owned subcollections, enabling clients to fetch their own data.
 * - No write operations should be granted with `if true;`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in, is owner, and the document exists).
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of an admin role document.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants the owner full access to their user profile.
     * @path /users/{userId}
     * @allow (read, write) if isSignedIn() && request.auth.uid == userId
     * @deny (read, write) if isSignedIn() && request.auth.uid != userId
     * @principle Enforces user-ownership: Only the authenticated user can access their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to product information and restricts write access to admins.
     * @path /products/{productId}
     * @allow (read) to any user, signed in or not.
     * @allow (create, update, delete) to admin users.
     * @deny (create, update, delete) to non-admin users.
     * @principle Allows public read access for product browsing and restricts modification to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants the owner full access to their shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (read, write) if isSignedIn() && request.auth.uid == userId
     * @deny (read, write) if isSignedIn() && request.auth.uid != userId
     * @principle Enforces user-ownership: Only the authenticated user can access their own shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants the owner full access to the items in their shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (read, write) if isSignedIn() && request.auth.uid == userId
     * @deny (read, write) if isSignedIn() && request.auth.uid != userId
     * @principle Enforces user-ownership: Only the authenticated user can access their own cart items.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants the owner full access to their orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (read, write) if isSignedIn() && request.auth.uid == userId
     * @deny (read, write) if isSignedIn() && request.auth.uid != userId
     * @principle Enforces user-ownership: Only the authenticated user can access their own orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any signed-in user to read order items, but only if they have access to the parent order.  Write access is denied.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

      /**
       * @description Allows any signed-in user to read payments, but only if they have access to the parent order.  Write access is denied.
       * @path /orders/{orderId}/payments/{paymentId}
       */
    match /orders/{orderId}/payments/{paymentId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants admin privileges to a user by creating a document with their UID.
     * @path /roles_admin/{uid}
     */
    match /roles_admin/{uid} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
    }
  }
}