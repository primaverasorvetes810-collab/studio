/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * combined with public read access and admin-only write access for product data.
 * Administrative privileges are granted based on the existence of a document
 * in the `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can access their data.
 * - /products/{productId}: Stores product information. Publicly accessible for reading,
 *   but write access is restricted to admins.
 * - /users/{userId}/shoppingCarts/{cartId}: Stores shopping carts for each user.
 *   Path-based ownership ensures only the user can access their cart.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Stores cart items within a shopping cart.
 *   Inherits ownership from the parent shopping cart.
 * - /users/{userId}/orders/{orderId}: Stores order information for each user.
 *   Path-based ownership ensures only the user can access their orders.
 * - /orders/{orderId}/orderItems/{orderItemId}: Stores order items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Stores payments associated with an order.
 * - /roles_admin/{uid}: Indicates administrative privileges. Existence of a document grants admin rights.
 *
 * Key Security Decisions:
 * - User-specific data is strictly controlled by path-based ownership.
 * - Product data is publicly readable but only writable by admins.
 * - Admin privileges are determined by the existence of a document in the /roles_admin collection.
 * - No user listing is allowed at the root level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document, based on the userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the document (isSignedIn, isOwner, and resource exists).
     */
    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Checks if the current user is an admin, by checking if a roles_admin document exists for the user's uid.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create their own profile if request.auth.uid == userId.
     * @allow (get, update, delete) User 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can get, update, and delete their own profile.
     * @deny (create) User 'attackerId' cannot create a profile with a different userId.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read product information.
     * @allow (create, update, delete) Only admins can create, update, or delete product information.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete product information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCarts/{cartId} collection.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create, get, update, delete) User 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create, get, update and delete their own shopping carts if request.auth.uid == userId.
     * @deny (create, get, update, delete) User 'attackerId' cannot create or modify shopping carts for a different userId.
     * @principle Enforces document ownership for all operations on shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} collection.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create, get, update, delete) User 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create, get, update and delete cart items in their own shopping carts if request.auth.uid == userId.
     * @deny (create, get, update, delete) User 'attackerId' cannot create or modify cart items for a different userId.
     * @principle Enforces document ownership inherited from the parent shopping cart for cart items.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.shoppingCartId == cartId;
      allow update: if isExistingOwner(userId) && request.resource.data.shoppingCartId == resource.data.shoppingCartId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete) User 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create, get, update and delete their own orders if request.auth.uid == userId.
     * @deny (create, get, update, delete) User 'attackerId' cannot create or modify orders for a different userId.
     * @principle Enforces document ownership for all operations on orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders/{orderId}/orderItems/{orderItemId} collection.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /orders/{orderId}/payments/{paymentId} collection.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /roles_admin/{uid} collection.
     * @path /roles_admin/{uid}
     * @allow (create) User 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can be made admin by another admin if isAdmin().
     * @allow (get) Admins can get user roles.
     * @deny (create) Non-admin users can not become admins.
     *
     * @principle Only admins can create/modify admin roles.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}