/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data and their associated resources (shopping carts, orders) are strictly controlled by the individual user.
 * Product and ProductGroup data is publicly readable, but write access is limited to administrators.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /productGroups/{productGroupId}: Product groups, publicly readable, admin-only write.
 * - /products/{productId}: Products, publicly readable, admin-only write. Products have a 'groupId' for categorization.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Documents indicating administrative privileges. The document ID must match the user's UID.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Product and ProductGroup data is publicly readable.
 * - Write access to Product and ProductGroup data is restricted to admins.
 * - Listing of users is disallowed.
 * - Role-based admin access is determined by the existence of a document in /roles_admin/{uid}.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced using path-based rules, ensuring that the `userId` in the path matches the authenticated user's UID.
 * - Admin privileges are determined by the existence of a document in the /roles_admin/{uid} collection. This avoids complex queries and ensures fast, reliable authorization checks.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} path, ensuring that it is not mixed with public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user's UID.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the userId.
     * @param {string} userId The user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the owner of the resource and it exists.
      * Used for update and delete operations.
      * @param {string} userId The user's UID.
      * @return {bool} True if the user is the owner and resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile at /users/user123.
     * @deny (create) User with UID 'user123' attempts to create a profile at /users/user456.
     * @allow (get) User with UID 'user123' reads their profile at /users/user123.
     * @deny (get) User with UID 'user123' attempts to read profile at /users/user456.
     * @allow (update) User with UID 'user123' updates their profile at /users/user123.
     * @deny (update) User with UID 'user123' attempts to update profile at /users/user456.
     * @allow (delete) User with UID 'user123' deletes their profile at /users/user123.
     * @deny (delete) User with UID 'user123' attempts to delete profile at /users/user456.
     * @principle Enforces user-ownership; users can only access their own profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product groups.
     * @path /productGroups/{productGroupId}
     * @allow (get) Any user can read a product group.
     * @allow (list) Any user can list product groups.
     * @allow (create) Admin creates a new product group.
     * @deny (create) Non-admin attempts to create a product group.
     * @allow (update) Admin updates a product group.
     * @deny (update) Non-admin attempts to update a product group.
     * @allow (delete) Admin deletes a product group.
     * @deny (delete) Non-admin attempts to delete a product group.
     * @principle Publicly readable, admin-only write access.
     */
    match /productGroups/{productGroupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get) Any user can read a product.
     * @allow (list) Any user can list products.
     * @allow (create) Admin creates a new product.
     * @deny (create) Non-admin attempts to create a product.
     * @allow (update) Admin updates a product.
     * @deny (update) Non-admin attempts to update a product.
     * @allow (delete) Admin deletes a product.
     * @deny (delete) Non-admin attempts to delete a product.
     * @principle Publicly readable, admin-only write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with UID 'user123' creates their cart at /users/user123/shoppingCarts/cart123.
     * @deny (create) User with UID 'user123' attempts to create a cart at /users/user456/shoppingCarts/cart123.
     * @allow (get) User with UID 'user123' reads their cart at /users/user123/shoppingCarts/cart123.
     * @deny (get) User with UID 'user123' attempts to read cart at /users/user456/shoppingCarts/cart123.
     * @allow (update) User with UID 'user123' updates their cart at /users/user123/shoppingCarts/cart123.
     * @deny (update) User with UID 'user123' attempts to update cart at /users/user456/shoppingCarts/cart123.
     * @allow (delete) User with UID 'user123' deletes their cart at /users/user123/shoppingCarts/cart123.
     * @deny (delete) User with UID 'user123' attempts to delete cart at /users/user456/shoppingCarts/cart123.
     * @principle Enforces user-ownership; users can only access their own shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with UID 'user123' creates a cart item in their cart.
     * @deny (create) User with UID 'user123' attempts to create a cart item in another user's cart.
     * @allow (get) User with UID 'user123' reads a cart item in their cart.
     * @deny (get) User with UID 'user123' attempts to read a cart item in another user's cart.
     * @allow (update) User with UID 'user123' updates a cart item in their cart.
     * @deny (update) User with UID 'user123' attempts to update a cart item in another user's cart.
     * @allow (delete) User with UID 'user123' deletes a cart item in their cart.
     * @deny (delete) User with UID 'user123' attempts to delete a cart item in another user's cart.
     * @principle Inherits ownership from the parent shopping cart; only the owner can access the items.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.shoppingCartId == cartId;
      allow update: if isExistingOwner(userId) && request.resource.data.shoppingCartId == cartId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with UID 'user123' creates an order.
     * @deny (create) User with UID 'user123' attempts to create an order for another user.
     * @allow (get) User with UID 'user123' reads their order.
     * @deny (get) User with UID 'user123' attempts to read another user's order.
     * @allow (update) User with UID 'user123' updates their order.
     * @deny (update) User with UID 'user123' attempts to update another user's order.
     * @allow (delete) User with UID 'user123' deletes their order.
     * @deny (delete) User with UID 'user123' attempts to delete another user's order.
     * @principle Enforces user-ownership; users can only access their own orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) Any user can read order items.
     * @allow (list) Any user can list order items.
     * @allow (create) Admin creates a new order item.
     * @deny (create) Non-admin attempts to create an order item.
     * @allow (update) Admin updates an order item.
     * @deny (update) Non-admin attempts to update an order item.
     * @allow (delete) Admin deletes an order item.
     * @deny (delete) Non-admin attempts to delete an order item.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
       allow get, list: if isAdmin(); // TODO: Determine read access for order items based on the order's ownership or admin role.
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get) Any user can read payments.
     * @allow (list) Any user can list payments.
     * @allow (create) Admin creates a new payment.
     * @deny (create) Non-admin attempts to create a payment.
     * @allow (update) Admin updates a payment.
     * @deny (update) Non-admin attempts to update a payment.
     * @allow (delete) Admin deletes a payment.
     * @deny (delete) Non-admin attempts to delete a payment.
     */
    match /orders/{orderId}/payments/{paymentId} {
       allow get, list: if isAdmin(); // TODO: Determine read access for payments based on the order's ownership or admin role.
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) Only a user that validates ownership can create the admin role document to themselves.
     * @deny (create) User with UID 'user123' attempts to create a role at /roles_admin/user456.
     * @allow (get) Only the admin can read its role document.
     * @deny (get) User with UID 'user123' attempts to read role document at /roles_admin/user456.
     * @allow (update) Only the admin can update its own role document.
     * @deny (update) User with UID 'user123' attempts to update role document at /roles_admin/user456.
     * @allow (delete) Only the admin can delete its own role document.
     * @deny (delete) User with UID 'user123' attempts to delete role document at /roles_admin/user456.
     */
    match /roles_admin/{uid} {
      allow get: if isOwner(uid);
      allow list: if false;
      allow create: if isOwner(uid) && request.resource.data.email is string;
      allow update: if isExistingOwner(uid) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(uid);
    }
  }
}