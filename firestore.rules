/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * public read access for product information, and admin-restricted write access.
 * Denormalization is used to ensure authorization independence, simplifying
 * rules and improving performance.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a specific user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items within a user's cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within a specific order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for a specific order.
 * - /roles_admin/{uid}: Admin role, granting elevated privileges.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Products are publicly readable but only admins can modify them.
 * - List operation permissions follow ownership; users can list items in their own collections.
 * - Rules are structured for authorization independence, avoiding chained `get()` calls.
 *
 * Denormalization for Authorization:
 * - User ownership is encoded in document paths (e.g., /users/{userId}/...) to avoid `get()` calls and enforce ownership.
 * - Admin privileges are granted by the existence of a document in `/roles_admin/{uid}`.
 *
 * Structural Segregation:
 * - Public product data is stored in a top-level collection (/products) separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in `/roles_admin/{uid}`.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile if the userId in the path matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create) - If the userId in the path does not match the authenticated user's uid.
     * @deny (get, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get, list) - Anyone can read product information.
     * @allow (create, update, delete) - Only admins can modify product information.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete products.
     * @principle Allows public read access with admin-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (get, list, create, update, delete) - Authenticated user can manage their own shopping carts.
     * @deny (get, list, create, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (get, list, create, update, delete) - Authenticated user can manage items in their own shopping carts.
     * @deny (get, list, create, update, delete) - If the authenticated user is not the owner.
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) - Authenticated user can manage their own orders.
     * @deny (get, list, create, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) - Anyone can read order items.
     * @allow create, update, delete: if false; // TODO: Add admin/service account validation if writes are needed.
     * @principle Read is not enforced.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) - Anyone can read payments.
     * @allow create, update, delete: if false; // TODO: Add admin/service account validation if writes are needed.
     * @principle Read is not enforced.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (get, create, update, delete) - Only admins can create, update, or delete admin roles (by creating documents).
     * @allow list: if false; // No listing of admin roles.
     * @deny (get, create, update, delete) - Non-admins cannot grant admin roles.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}