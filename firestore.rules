/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data,
 *              public read access to product catalog data, and admin-only write access
 *              to product catalog management.
 *
 * @dataStructure
 *  - /users/{userId}: User profile data, accessible only by the user.
 *  - /productGroups/{productGroupId}: Product categories, publicly readable, admin-writeable.
 *  - /products/{productId}: Product details, publicly readable, admin-writeable. Products have a `groupId`
 *    for categorization and efficient querying.
 *  - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a specific user.
 *  - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a shopping cart.
 *  - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 *  - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 *  - /orders/{orderId}/payments/{paymentId}: Payments for a specific order.
 *  - /roles_admin/{uid}: Document that determines administrative privileges. If a document exists for a UID,
 *   that user is considered an admin.
 *
 * @keySecurityDecisions
 *  - User data is strictly private and accessible only to the owning user.
 *  - Product catalog data (productGroups, products) is publicly readable to enable browsing
 *    without authentication, but write access is restricted to admins.
 *  - User listing is disallowed to protect privacy and prevent enumeration attacks.
 *  - All write operations (create, update, delete) on user-owned data require authentication
 *    and ownership validation.
 *  - Relational integrity is enforced on create operations to ensure proper ownership links
 *    between parent and child documents.
 *
 * @denormalizationForAuthorization
 *  - The `Admin` role is determined by the existence of a document in the `/roles_admin/{uid}` collection,
 *    where the document ID is the user's UID.
 *
 * @structuralSegregation
 *  - Private user data is stored under `/users/{userId}`, while public product catalog data
 *    is stored at the top level (`/productGroups`, `/products`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (read, write) User with UID 'user123' can read/write the document at /users/user123.
     * @deny (read, write) User with UID 'user456' cannot read/write the document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow read, write: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to product group data. Publicly readable, admin-only write access.
     * @path /productGroups/{productGroupId}
     * @allow (get, list) Any user can read product group data.
     * @allow (create, update, delete) Admin user can modify product group data.
     * @deny (create, update, delete) Non-admin user cannot modify product group data.
     * @principle Public read, admin-only write.
     */
    match /productGroups/{productGroupId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to product data. Publicly readable, admin-only write access.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @allow (create, update, delete) Admin user can modify product data.
     * @deny (create, update, delete) Non-admin user cannot modify product data.
     * @principle Public read, admin-only write.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to shopping cart data. Only the user can read or write their own cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (read, write) User with UID 'user123' can read/write the cart at /users/user123/shoppingCarts/cart456.
     * @deny (read, write) User with UID 'user456' cannot read/write the cart at /users/user123/shoppingCarts/cart456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow read, write: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to cart item data. Only the user can read or write items in their own cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (read, write) User with UID 'user123' can read/write the item at /users/user123/shoppingCarts/cart456/cartItems/item789.
     * @deny (read, write) User with UID 'user456' cannot read/write the item at /users/user123/shoppingCarts/cart456/cartItems/item789.
     * @principle Enforces document ownership inherited from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow read, write: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to order data. Only the user can read or write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (read, write) User with UID 'user123' can read/write the order at /users/user123/orders/order789.
     * @deny (read, write) User with UID 'user456' cannot read/write the order at /users/user123/orders/order789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      allow read, write: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to order item data. Only the user can read or write items in their own order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (read, write) User with UID 'user123' can read/write the item at /orders/order789/orderItems/item456.
     * @deny (read, write) User with UID 'user456' cannot read/write the item at /orders/order789/orderItems/item456.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
        allow read, write, get, list, create, update, delete: if false; // TODO: Need the user id to validate ownership. No access allowed.
    }

    /**
     * @description Controls access to payment data. Only the user can read or write items in their own order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (read, write) User with UID 'user123' can read/write the item at /orders/order789/payments/payment456.
     * @deny (read, write) User with UID 'user456' cannot read/write the item at /orders/order789/payments/payment456.
     */
    match /orders/{orderId}/payments/{paymentId} {
        allow read, write, get, list, create, update, delete: if false; // TODO: Need the user id to validate ownership. No access allowed.
    }

    /**
     * @description Controls access to admin role data. Only the user with the specified UID can read their own admin document.
     *              This implicitly grants admin privileges.
     * @path /roles_admin/{uid}
     * @allow (read, create) User with UID 'admin123' can create/read the document at /roles_admin/admin123.
     * @deny (read, create) User with UID 'user456' cannot create/read the document at /roles_admin/admin123.
     * @principle Grants admin rights based on document existence.
     */
    match /roles_admin/{uid} {
      allow read, create: if isSignedIn() && request.auth.uid == uid;
      allow update, delete: if false;
      allow list: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }

  function isAdmin() {
    return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}