/**
 * @file Firestore Security Rules
 * @description This ruleset is configured to allow public read access to all data, and write access for any authenticated user.
 *
 * Core Philosophy: All data is publicly readable, and write access is granted to any authenticated user, effectively disabling any security restrictions based on roles or ownership. This is intended for rapid prototyping and should NOT be used in a production environment.
 * Data Structure: Data is organized into collections representing users, products, shopping carts, orders, and related items.
 * Key Security Decisions: Authentication is required for writes, but no authorization checks are performed. This allows any logged-in user to modify any data.
 * Denormalization for Authorization: Not applicable, as all users have write access.
 * Structural Segregation: Not applicable, as access is uniform across all collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read and write user profiles.
     * @path /users/{userId}
     * @allow (get, list) Any user can read user profiles.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete user profiles.
     * @deny none
     * @principle Allows unrestricted access to user profiles for rapid prototyping.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write product information.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete product information.
     * @deny none
     * @principle Allows unrestricted access to product information for rapid prototyping.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write shopping carts for any user.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (get, list) Any user can read shopping carts.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete shopping carts.
     * @deny none
     * @principle Allows unrestricted access to shopping carts for rapid prototyping.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write cart items within any shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (get, list) Any user can read cart items.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete cart items.
     * @deny none
     * @principle Allows unrestricted access to cart items for rapid prototyping.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write order information for any user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list) Any user can read order information.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete order information.
     * @deny none
     * @principle Allows unrestricted access to order information for rapid prototyping.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write order items within any order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) Any user can read order items.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete order items.
     * @deny none
     * @principle Allows unrestricted access to order items for rapid prototyping.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write payments associated with any order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) Any user can read payments.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete payments.
     * @deny none
     * @principle Allows unrestricted access to payments for rapid prototyping.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

      /**
       * @description Allows any authenticated user to manage admin privileges.
       * @path /roles_admin/{uid}
       * @allow (get, list) Any user can read admin roles.
       * @allow (create, update, delete) Any authenticated user can grant or revoke admin privileges.
       * @deny none
       * @principle Allows unrestricted access to admin privileges for rapid prototyping.
       */
    match /roles_admin/{uid} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}