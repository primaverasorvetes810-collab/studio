
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    // Função para verificar se o usuário tem a função de administrador.
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /users/{userId} {
      // O usuário pode ler, criar e atualizar seu próprio perfil.
      allow read, create, update: if isSignedIn() && isOwner(userId);
      // Qualquer usuário logado pode listar os clientes.
      allow list: if isSignedIn();
      
      match /orders/{orderId} {
        // Um usuário pode ler e criar seus próprios pedidos.
        allow read, create: if isSignedIn() && isOwner(userId);
      }

      match /shoppingCarts/{cartId} {
        // Um usuário pode gerenciar seu próprio carrinho de compras.
        allow read, create, update, delete: if isSignedIn() && isOwner(userId);

        match /cartItems/{cartItemId} {
          // Permite gerenciar os itens dentro do carrinho.
          allow read, create, update, delete: if isSignedIn() && isOwner(userId);
        }
      }
    }
    
    // Apenas administradores podem atualizar os pedidos de outros.
    match /orders/{orderId} {
      allow read: if isSignedIn();
      allow update: if isAdmin();
    }

    match /productGroups/{productGroupId} {
      // Permite que qualquer um leia.
      allow read: if true;
      // Apenas administradores podem escrever.
      allow write: if isAdmin();
    }

    match /products/{productId} {
      // Permite que qualquer um leia.
      allow read: if true;
      // Apenas administradores podem escrever.
      allow write: if isAdmin();
    }

    match /roles_admin/{uid} {
      // Regra de Leitura: Apenas administradores podem ver quem são outros administradores.
      allow read: if isAdmin();
      // Regra de Escrita: Qualquer usuário autenticado pode se tornar um admin.
      // Esta é uma regra permissiva para resolver o problema do primeiro admin.
      // DEVE ser alterada para `if isAdmin();` após a configuração inicial.
      allow create: if isSignedIn();
    }
  }
}
