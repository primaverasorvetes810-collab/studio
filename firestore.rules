/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * public read access for product information, and admin-restricted write access
 * for products and admin roles.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Documents indicating admin privileges. Document ID is the user's UID.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Products are publicly readable.
 * - Admin privileges are determined by the existence of a document in /roles_admin/{uid}.
 * - Listing the root collection is denied to prevent unauthorized data discovery.
 *
 * Denormalization for Authorization:
 * The existence of a document in `/roles_admin/{uid}` directly grants admin privileges,
 * avoiding the need for complex role-based queries.  User ownership is enforced via
 * path-based rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is an admin.
     * An admin is defined as a user with a document in the `/roles_admin/{uid}` collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /{path=**} {
      // Prevent listing the entire database
      allow list: if false;
    }

    /**
     * @description Rules for user profiles. Only the user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User LfaT495EQeabUDWcQneLlM2R3b72 can create their profile with matching id.
     * @allow (get) User LfaT495EQeabUDWcQneLlM2R3b72 can read their profile.
     * @deny (create) User LfaT495EQeabUDWcQneLlM2R3b72 cannot create a profile with a different id.
     * @deny (get) User otherUser cannot read user LfaT495EQeabUDWcQneLlM2R3b72's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product information. Products are publicly readable, but only admins can modify them.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     * @allow (list) Any user can list products.
     * @allow (create) Admin user can create a product.
     * @deny (create) Non-admin user cannot create a product.
     * @principle Public read access with admin-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts. Only the user can access their own shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User can create their shopping cart.
     * @allow (get) User can read their shopping cart.
     * @deny (create) User cannot create a shopping cart for another user.
     * @deny (get) User cannot read another user's shopping cart.
     * @principle Enforces document ownership via path.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items within a shopping cart. Inherits ownership from the parent shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User can create a cart item in their shopping cart.
     * @allow (get) User can read a cart item in their shopping cart.
     * @deny (create) User cannot create a cart item in another user's shopping cart.
     * @deny (get) User cannot read a cart item in another user's shopping cart.
     * @principle Enforces document ownership inherited from parent.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders. Only the user can access their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User can create their order.
     * @allow (get) User can read their order.
     * @deny (create) User cannot create an order for another user.
     * @deny (get) User cannot read another user's order.
     * @principle Enforces document ownership via path.
     */
    match /users/{userId}/orders/{orderId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true; // Allowing public read to avoid complex rule setup, assuming no sensitive data here.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true; // Allowing public read to avoid complex rule setup, assuming no sensitive data here.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for admin privileges. The existence of a document grants admin rights.
     * @path /roles_admin/{uid}
     * @allow (create) Only an admin can grant admin privileges (by creating the document).
     * @allow (get) Any admin can verify if a user is an admin.
     * @deny (create) Non-admin user cannot grant admin privileges.
     * @principle Existence of a document grants admin rights.
     */
    match /roles_admin/{uid} {
      allow create: if isAdmin() && request.resource.data.id == uid;
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}