/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * with public read access to product information and admin-restricted write access.
 * The existence of a document in /roles_admin/{uid} indicates administrative privileges.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts, owned by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items, owned by the user's cart.
 * - /users/{userId}/orders/{orderId}: Orders, owned by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Order items, accessible to anyone for data consistency.
 * - /orders/{orderId}/payments/{paymentId}: Payments, accessible to anyone for data consistency.
 * - /roles_admin/{uid}: Admin roles, existence grants admin privileges.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path.
 * - Product data is publicly readable but only admins can modify it.
 * - Listing of users is explicitly forbidden.
 * - The `roles_admin` collection grants admin privileges based on document existence.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` in the path with `request.auth.uid`.
 * - Admin privileges are determined by the existence of a document in `/roles_admin/{uid}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Controls access to user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   request.auth.uid: 'user123'
     *   request.resource.data: {id: 'user123', email: 'test@example.com', registerTime: '2024-01-01T00:00:00Z'}
     * @deny (update) User with ID 'user123' cannot update another user's profile (e.g., 'user456').
     *   request.auth.uid: 'user123'
     *   request.resource.data: {id: 'user456', email: 'test2@example.com', registerTime: '2024-01-02T00:00:00Z'}
     * @principle Enforces document ownership for writes and path consistency.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product information. Publicly readable, admin-writeable.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     *   request.auth.uid: null (anonymous user)
     * @allow (create) Admin user can create a product.
     *   request.auth.uid: 'admin123' (assuming 'admin123' has a document in /roles_admin/admin123)
     * @deny (update) Non-admin user cannot update product information.
     *   request.auth.uid: 'user123'
     * @principle Restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to shopping carts. Only the user can read/write their own cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with ID 'user123' can create a shopping cart for themselves.
     *   request.auth.uid: 'user123'
     *   request.resource.data: {userId: 'user123'}
     * @deny (update) User with ID 'user123' cannot update another user's shopping cart (e.g., 'user456').
     *   request.auth.uid: 'user123'
     *   request.resource.data: {userId: 'user456'}
     * @principle Enforces document ownership for writes and path consistency.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to cart items. Only the user can read/write items in their own cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with ID 'user123' can create a cart item in their own cart.
     *   request.auth.uid: 'user123'
     *   request.resource.data: {shoppingCartId: 'cart123'}
     * @deny (update) User with ID 'user123' cannot update a cart item in another user's cart.
     *   request.auth.uid: 'user123'
     *   request.resource.data: {shoppingCartId: 'cart456'}
     * @principle Enforces document ownership inherited from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to orders. Only the user can read/write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order for themselves.
     *   request.auth.uid: 'user123'
     *   request.resource.data: {userId: 'user123'}
     * @deny (update) User with ID 'user123' cannot update another user's order.
     *   request.auth.uid: 'user123'
     *   request.resource.data: {userId: 'user456'}
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order items. No specific write access restrictions.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) Any user can get order items.
     * @allow (list) Any user can list order items.
     * @principle No specific restrictions.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Determine proper authorization for order items
    }

    /**
     * @description Controls access to payments. No specific write access restrictions.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get) Any user can get payment information.
     * @allow (list) Any user can list payment information.
     * @principle No specific restrictions.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Determine proper authorization for payments
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{uid}
     * @allow (create) N/A - Document creation is managed by backend.
     * @allow (get) Checks for document existence to grant admin status.
     * @principle Admin role is determined by document existence.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create, update, delete: if false; // Creation and deletion are managed by a trusted environment.
    }
  }
}