/**
 * @file Firestore Security Rules for Primavera Delivery Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 * while allowing public read access to product information. Administrative privileges are
 * granted based on the existence of a document in the `/roles_admin/{uid}` collection.
 *
 * @data_structure The Firestore database is structured with user-specific data nested under
 * `/users/{userId}`, product data at the top-level `/products/{productId}`, and administrative
 * roles managed in the `/roles_admin/{uid}` collection.  Shopping carts and orders are stored
 * as subcollections under the user. Payments and OrderItems are stored as subcollections under
 * their respective order.
 *
 * @key_security_decisions
 *   - User data (profiles, shopping carts, orders) is strictly controlled by the user's UID.
 *   - Listing of all users is disallowed to protect privacy.
 *   - Product information is publicly readable but only modifiable by admins.
 *   - Administrative privileges are determined by the presence of a document in `/roles_admin/{uid}`.
 *   - No data schema validation is performed to allow for rapid iteration in the prototyping phase.
 *
 * @denormalization_for_authorization
 *   - The existence of a document in `/roles_admin/{uid}` grants admin privileges, avoiding the need to store admin status within the user profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users.

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (read) to anyone.
     * @allow (write) to admins only.
     * @deny (write) to non-admins.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Controls access to cart items within a shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Controls access to orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Controls access to order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (read, write) to admins only.
     * @deny (read, write) to non-admins.
     * @principle Restricts all access to admins.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (read, write) to admins only.
     * @deny (read, write) to non-admins.
     * @principle Restricts all access to admins.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{uid}
     * @allow (read, write) if the request is made by the user with matching uid.
     * @deny (read, write) if the request is made by a different user.
     * @principle Uses document existence to grant admin rights.
     */
    match /roles_admin/{uid} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(uid) {
        return isSignedIn() && request.auth.uid == uid;
      }

      allow get: if isAdmin() || isOwner(uid);
      allow list: if false; // Listing admins is not allowed.

      allow create: if isOwner(uid); // Only the user can create their admin role.
      allow update: if false; // Admin role cannot be updated.
      allow delete: if isOwner(uid); // Only the user can delete their admin role.
    }

     /**
      * @description Checks if the requesting user has admin privileges.
      * @return True if the user is authenticated and has a document in the /roles_admin/{uid} collection, false otherwise.
      * @note This function uses `exists()` to check for the existence of the admin document.
      */
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}