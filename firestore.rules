/**
 * @file Firestore Security Rules for Primavera Delivery Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *   while allowing public read access to product information. Administrative privileges
 *   are granted based on the existence of a document in the /roles_admin collection.
 *   All write operations are carefully guarded with authentication and authorization checks.
 *
 * @data_structure
 *   - /users/{userId}: User profile data, accessible only by the user themselves.
 *   - /products/{productId}: Product catalog, publicly readable, writeable only by admins.
 *   - /users/{userId}/shoppingCarts/{cartId}: User's shopping carts, accessible only by the user.
 *   - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items in a shopping cart, accessible only by the user.
 *   - /users/{userId}/orders/{orderId}: User's order history, accessible only by the user.
 *   - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 *   - /orders/{orderId}/payments/{paymentId}: Payment information for an order.
 *   - /roles_admin/{uid}: Collection indicating admin privileges; presence grants admin role.
 *
 * @key_security_decisions
 *   - User data is strictly private and accessible only to the authenticated user.
 *   - Product data is publicly readable to facilitate browsing.
 *   - Admin privileges are determined by the existence of a document under `/roles_admin/{uid}`.
 *   - Listing of the entire database `/` is denied.
 *   - Write operations on all collections require appropriate authorization.
 *
 * @denormalization_for_authorization
 *   - The rules leverage path-based authorization (e.g., /users/{userId}) to avoid costly `get()` calls for ownership checks.
 *   - The existence of a document under `/roles_admin/{uid}` directly confers administrative privileges, simplifying the `isAdmin()` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document, based on the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is an existing owner of the document.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data.id);
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{uid}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Denies listing of the entire database root.
     */
    match / {
      allow list: if false;
    }

    /**
     * @description Manages user profile data. Only the user can access their data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages product information. Publicly accessible for reading, write access is restricted to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages shopping carts for each user. Path-based ownership ensures only the user can access their cart.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages cart items within a shopping cart. Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages order information for each user. Path-based ownership ensures only the user can access their orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages order items within an order.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages payments associated with an order.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Indicates administrative privileges. Existence of a document grants admin rights.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }
  }
}