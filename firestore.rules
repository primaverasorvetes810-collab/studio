/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, shopping carts, orders). Only the authenticated user can access
 * their own data. Product data is publicly readable. Administrative
 * privileges are granted based on the existence of a document in the
 * `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /productGroups/{productGroupId}: Product categories.
 * - /products/{productId}: Product details.
 * - /users/{userId}/shoppingCarts/{cartId}: User's shopping carts.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items in a shopping cart.
 * - /users/{userId}/orders/{orderId}: User's order history.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items in an order.
 * - /orders/{orderId}/payments/{paymentId}: Payment information for an order.
 * - /roles_admin/{uid}: Documents indicating admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Product data is publicly readable to facilitate browsing.
 * - Admin privileges are determined by the existence of a document in `/roles_admin/{uid}`,
 *   where the document ID matches the user's UID.
 *
 * Denormalization for Authorization:
 * - User-specific data (carts, orders) is nested under the `/users/{userId}` path to
 *   simplify ownership checks and avoid the need for complex queries or `get()` calls
 *   in the rules. The userId is implicitly available in the path.
 *
 * Structural Segregation:
 * - There is no explicit segregation of public vs. private data within a single collection.
 *   Instead, separate collections are used for public product data and private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (read, write): Authenticated user with matching UID can access.
     *   Example: User 'user123' can read/write /users/user123.
     * @deny (read, write): Authenticated user attempts to access a different user's profile.
     *   Example: User 'user123' attempts to read/write /users/user456.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to product groups and restricts write access.
     * @path /productGroups/{productGroupId}
     * @allow (read): Any user can read product group information.
     * @allow (write): Only admins can modify product groups.
     * @deny (write): Non-admin users cannot modify product groups.
     * @principle Public read access with admin-only writes for product catalog.
     */
    match /productGroups/{productGroupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to products and restricts write access.
     * @path /products/{productId}
     * @allow (read): Any user can read product information.
     * @allow (write): Only admins can modify products.
     * @deny (write): Non-admin users cannot modify products.
     * @principle Public read access with admin-only writes for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to a user's shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (read, write): Authenticated user with matching UID can access.
     *   Example: User 'user123' can read/write /users/user123/shoppingCarts/cart456.
     * @deny (read, write): Authenticated user attempts to access another user's cart.
     *   Example: User 'user123' attempts to read/write /users/user456/shoppingCarts/cart789.
     * @principle Enforces document ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to items within a user's shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (read, write): Authenticated user with matching UID can access.
     *   Example: User 'user123' can read/write /users/user123/shoppingCarts/cart456/cartItems/item789.
     * @deny (read, write): Authenticated user attempts to access another user's cart items.
     *   Example: User 'user123' attempts to read/write /users/user456/shoppingCarts/cart789/cartItems/item101.
     * @principle Enforces document ownership for cart items, inheriting from the parent cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a user's order history.
     * @path /users/{userId}/orders/{orderId}
     * @allow (read, write): Authenticated user with matching UID can access.
     *   Example: User 'user123' can read/write /users/user123/orders/order456.
     * @deny (read, write): Authenticated user attempts to access another user's orders.
     *   Example: User 'user123' attempts to read/write /users/user456/orders/order789.
     * @principle Enforces document ownership for order history.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (read): Any user can read order item details.
     * @allow (write): Only admins can modify order items.
     * @deny (write): Non-admin users cannot modify order items.
     * @principle Public read access for order items with admin-only writes.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true; // Consider restricting list access
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to payment information for an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (read): Any user can read payment details.
     * @allow (write): Only admins can modify payments.
     * @deny (write): Non-admin users cannot modify payments.
     * @principle Public read access for payments with admin-only writes.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true; // Consider restricting list access
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{uid}
     * @allow (read, write): Only the user with matching UID can create their admin document.
     * @deny (read, write): Non-admin users cannot access admin documents.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if request.auth.uid == uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
      * @param {string} userId The user ID to compare against the authenticated user's UID.
      * @return {boolean} True if the UIDs match and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Checks if the authenticated user has admin privileges.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}