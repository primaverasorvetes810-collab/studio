/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * with public read access for products and admin-restricted write access.
 * Administrative privileges are granted based on the existence of a document
 * in the `/roles_admin/{uid}` collection, where the document ID matches the user's UID.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, but only
 *   writable by admins.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a specific user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a shopping cart,
 *   inheriting ownership from the parent cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments associated with an order.
 * - /roles_admin/{uid}: Documents indicating administrative privileges. The document ID
 *   is the user's UID.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's UID in the path.
 * - Product data is publicly readable but only writable by admins.
 * - Administrative privileges are determined by the existence of a document
 *   in the `/roles_admin/{uid}` collection.
 * - Listing of the entire database is denied.
 *
 * Denormalization for Authorization:
 * The rules leverage path-based ownership, where the user ID is embedded in the
 * document path. This eliminates the need for costly `get()` calls to verify ownership.
 * For example, access to a user's shopping cart or orders is directly tied to the
 * user's ID in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user's UID.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId The user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     *              This combines the ownership check with a resource existence check,
     *              preventing operations on non-existent documents.
     * @param {string} userId The user's UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence
     *              of a document in the `/roles_admin/{uid}` collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Restricts access to the entire database.
     * @path /databases/{database}/documents
     * @allow (list) An admin can list the entire database content to diagnose and fix problems.
     * @deny (list) A non-admin user cannot list the entire database content, as this is a privacy violation.
     * @principle Prevents unauthorized listing of the entire database, ensuring data privacy and security.
     */
    match /{path=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profiles. Only the user can access their data.
     * @path /users/{userId}
     * @allow (create) A user with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) A user with UID 'user123' can get their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (update) A user with UID 'user123' can update their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (delete) A user with UID 'user123' can delete their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) A user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) A user with UID 'user456' cannot get the profile at /users/user123.
     * @deny (update) A user with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) A user with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages product information. Publicly accessible for reading, write access is restricted to admins.
     * @path /products/{productId}
     * @allow (get) Any user, signed in or not, can read product information at /products/product123.
     * @allow (list) Any user, signed in or not, can list product information at /products.
     * @allow (create) An admin can create a product at /products/product456.
     * @allow (update) An admin can update a product at /products/product456.
     * @allow (delete) An admin can delete a product at /products/product456.
     * @deny (create) A non-admin user cannot create a product at /products/product456.
     * @deny (update) A non-admin user cannot update a product at /products/product456.
     * @deny (delete) A non-admin user cannot delete a product at /products/product456.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages shopping carts for each user. Path-based ownership ensures only the user can access their cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) A user with UID 'user123' can create a cart at /users/user123/shoppingCarts/cart1 if request.auth.uid == 'user123'.
     * @allow (get) A user with UID 'user123' can get their cart at /users/user123/shoppingCarts/cart1 if request.auth.uid == 'user123'.
     * @allow (update) A user with UID 'user123' can update their cart at /users/user123/shoppingCarts/cart1 if request.auth.uid == 'user123'.
     * @allow (delete) A user with UID 'user123' can delete their cart at /users/user123/shoppingCarts/cart1 if request.auth.uid == 'user123'.
     * @deny (create) A user with UID 'user456' cannot create a cart at /users/user123/shoppingCarts/cart1.
     * @deny (get) A user with UID 'user456' cannot get the cart at /users/user123/shoppingCarts/cart1.
     * @deny (update) A user with UID 'user456' cannot update the cart at /users/user123/shoppingCarts/cart1.
     * @deny (delete) A user with UID 'user456' cannot delete the cart at /users/user123/shoppingCarts/cart1.
     * @principle Enforces path-based ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages cart items within a shopping cart. Inherits ownership from the parent shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) A user with UID 'user123' can add an item to their cart at /users/user123/shoppingCarts/cart1/cartItems/item1 if request.auth.uid == 'user123'.
     * @allow (get) A user with UID 'user123' can get an item from their cart at /users/user123/shoppingCarts/cart1/cartItems/item1 if request.auth.uid == 'user123'.
     * @allow (update) A user with UID 'user123' can update an item in their cart at /users/user123/shoppingCarts/cart1/cartItems/item1 if request.auth.uid == 'user123'.
     * @allow (delete) A user with UID 'user123' can remove an item from their cart at /users/user123/shoppingCarts/cart1/cartItems/item1 if request.auth.uid == 'user123'.
     * @deny (create) A user with UID 'user456' cannot add an item to the cart at /users/user123/shoppingCarts/cart1/cartItems/item1.
     * @deny (get) A user with UID 'user456' cannot get the item from the cart at /users/user123/shoppingCarts/cart1/cartItems/item1.
     * @deny (update) A user with UID 'user456' cannot update the item in the cart at /users/user123/shoppingCarts/cart1/cartItems/item1.
     * @deny (delete) A user with UID 'user456' cannot remove the item from the cart at /users/user123/shoppingCarts/cart1/cartItems/item1.
     * @principle Enforces ownership inherited from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages order information for each user. Path-based ownership ensures only the user can access their orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) A user with UID 'user123' can create an order at /users/user123/orders/order1 if request.auth.uid == 'user123'.
     * @allow (get) A user with UID 'user123' can get their order at /users/user123/orders/order1 if request.auth.uid == 'user123'.
     * @allow (update) A user with UID 'user123' can update their order at /users/user123/orders/order1 if request.auth.uid == 'user123'.
     * @allow (delete) A user with UID 'user123' can delete their order at /users/user123/orders/order1 if request.auth.uid == 'user123'.
     * @deny (create) A user with UID 'user456' cannot create an order at /users/user123/orders/order1.
     * @deny (get) A user with UID 'user456' cannot get the order at /users/user123/orders/order1.
     * @deny (update) A user with UID 'user456' cannot update the order at /users/user123/orders/order1.
     * @deny (delete) A user with UID 'user456' cannot delete the order at /users/user123/orders/order1.
     * @principle Enforces path-based ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) Any user can read an order item at /orders/order1/orderItems/item1.
     * @allow (list) Any user can list order items for an order at /orders/order1/orderItems.
     * @allow (create) An admin can create an order item at /orders/order1/orderItems/item1.
     * @allow (update) An admin can update an order item at /orders/order1/orderItems/item1.
     * @allow (delete) An admin can delete an order item at /orders/order1/orderItems/item1.
     * @deny (create) A non-admin user cannot create an order item at /orders/order1/orderItems/item1.
     * @deny (update) A non-admin user cannot update an order item at /orders/order1/orderItems/item1.
     * @deny (delete) A non-admin user cannot delete an order item at /orders/order1/orderItems/item1.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get) Any user can read a payment at /orders/order1/payments/payment1.
     * @allow (list) Any user can list payments for an order at /orders/order1/payments.
     * @allow (create) An admin can create a payment at /orders/order1/payments/payment1.
     * @allow (update) An admin can update a payment at /orders/order1/payments/payment1.
     * @allow (delete) An admin can delete a payment at /orders/order1/payments/payment1.
     * @deny (create) A non-admin user cannot create a payment at /orders/order1/payments/payment1.
     * @deny (update) A non-admin user cannot update a payment at /orders/order1/payments/payment1.
     * @deny (delete) A non-admin user cannot delete a payment at /orders/order1/payments/payment1.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Indicates administrative privileges. The document ID is the user's UID. Existence of a document grants admin rights.
     * @path /roles_admin/{uid}
     * @allow (create) A user with UID 'admin123' can create their admin profile at /roles_admin/admin123 only if request.auth.uid == 'admin123' AND they are already an admin.
     * @allow (get) A user with UID 'admin123' can get their admin profile at /roles_admin/admin123 if request.auth.uid == 'admin123' AND they are already an admin.
     * @allow (update) A user with UID 'admin123' can update their admin profile at /roles_admin/admin123 if request.auth.uid == 'admin123' AND they are already an admin.
     * @allow (delete) A user with UID 'admin123' can delete their admin profile at /roles_admin/admin123 if request.auth.uid == 'admin123' AND they are already an admin.
     * @deny (create) A user with UID 'user456' cannot create an admin profile at /roles_admin/admin123.
     * @deny (get) A user with UID 'user456' cannot get the admin profile at /roles_admin/admin123.
     * @deny (update) A user with UID 'user456' cannot update the admin profile at /roles_admin/admin123.
     * @deny (delete) A user with UID 'user456' cannot delete the admin profile at /roles_admin/admin123.
     * @principle Restricts admin profile management to existing admins.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin() && isOwner(uid);
      allow list: if false;
      allow create: if isAdmin() && isOwner(uid);
      allow update: if isAdmin() && isOwner(uid) && resource != null;
      allow delete: if isAdmin() && isOwner(uid) && resource != null;
    }
  }
}