/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User-specific data (profiles, shopping carts, orders) is strictly controlled by the owning user.
 * Product catalog data (product groups, products) is publicly readable but writable only by administrators.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /productGroups/{productGroupId}: Publicly readable product groups, writable only by admins.
 * - /products/{productId}: Publicly readable products, writable only by admins. Products have a 'groupId' for categorization.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a specific user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within a specific order.
 * - /orders/{orderId}/payments/{paymentId}: Payments associated with a specific order.
 * - /roles_admin/{uid}: Documents indicating administrative privileges. The document ID matches the user's UID.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, shopping carts, and orders.
 * - Product information is publicly readable to enable browsing without authentication.
 * - Administrative privileges are granted by the existence of a document in the `/roles_admin` collection.
 * - User listing is implicitly denied, as there is no rule allowing it.
 *
 * Denormalization for Authorization:
 * - Admin status is checked directly via the `isAdmin()` function, which performs a `get()` on the `/roles_admin/{uid}` document. While this is a read, the assumption is that admin status will be infrequently checked relative to data access, and is simpler than maintaining a separate auth claim.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read product groups, but only admins can create, update, or delete them.
     * @path /productGroups/{productGroupId}
     * @allow (get, list) Anyone can read product groups.
     * @allow (create, update, delete) Only admins can modify product groups.
     * @deny (create, update, delete) Non-admins cannot modify product groups.
     * @principle Provides public read access with role-based write restrictions.
     */
    match /productGroups/{productGroupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read products, but only admins can create, update, or delete them.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read products.
     * @allow (create, update, delete) Only admins can modify products.
     * @deny (create, update, delete) Non-admins cannot modify product groups.
     * @principle Provides public read access with role-based write restrictions.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to manage their own shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with matching UID can create their cart.
     * @allow (get, update, delete) Authenticated user can access their own cart.
     * @deny (create) User cannot create a cart with a mismatched UID.
     * @deny (get, update, delete) User cannot access another user's cart.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage items in their own shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with matching UID can create cart items in their cart.
     * @allow (get, update, delete) Authenticated user can access their own cart items.
     * @deny (create) User cannot create a cart item with a mismatched UID.
     * @deny (get, update, delete) User cannot access another user's cart items.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       allow get: if isOwner(userId);
       allow list: if false;
       allow create: if isOwner(userId);
       allow update: if isOwner(userId);
       allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with matching UID can create their order.
     * @allow (get, update, delete) Authenticated user can access their own order.
     * @deny (create) User cannot create an order with a mismatched UID.
     * @deny (get, update, delete) User cannot access another user's order.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows access to order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
       allow get, list: if false;
       allow create, update, delete: if false;
    }

    /**
     * @description Allows access to payments within an order.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
       allow get, list: if false;
       allow create, update, delete: if false;
    }

    /**
     * @description Grants admin privileges based on document existence in this collection.
     * @path /roles_admin/{uid}
     * @allow (get) Any authenticated user can check for admin status (for UI purposes).
     * @allow (create) Only an existing admin can grant another user admin privileges.
     * @allow (delete) Only an existing admin can revoke admin privileges.
     * @deny (create, delete) Non-admins cannot grant or revoke admin privileges.
     * @principle Implements role-based access control using document existence.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    function isAdmin() {
      return request.auth.uid != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}