/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * combined with public read access and admin-restricted writes for product data.
 * Administrative privileges are granted based on the existence of a document
 * in the `/roles_admin/{uid}` collection, with the document ID matching the user's UID.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, but only admins can modify.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by a user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Admin role assignments, where {uid} is the user's UID.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the authenticated user can access their profile, carts, and orders.
 * - Product data is publicly readable to facilitate browsing, but creation, updates, and deletions are restricted to admins.
 * - Administrative privileges are determined by the existence of a document in the `/roles_admin/{uid}` collection.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced using path-based rules (e.g., `/users/{userId}`), removing the need for `get()` calls to verify ownership.
 * - Admin privileges are granted based on document existence in `/roles_admin/{uid}`, avoiding complex role lookups.
 *
 * Structural Segregation:
 * - Public product data is stored in a top-level collection (`/products`), while private user data is nested under `/users/{userId}`, enabling different access control policies for each type of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data, allowing only the user themselves to read and write.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants public read access to product data, but restricts write access to admins only.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Allows public reads, but enforces admin-only writes for product management.
     */
    match /products/{productId} {
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to a user's shopping cart, allowing only the user themselves to read and write.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to cart items within a user's shopping cart, inheriting ownership from the parent shopping cart.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations, inheriting ownership from the parent.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to a user's orders, allowing only the user themselves to read and write.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to order items within an order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to payments associated with an order.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants admin privileges based on the existence of a document with the user's UID in the `roles_admin` collection.
     * @path /roles_admin/{uid}
     * @allow (create) if request.auth.uid == uid && request.auth.token.email == 'gustavoportofeliz@gmail.com';
     * @allow (get) if true;
     * @allow (update, delete) if false;
     * @principle Assigns admin roles by document existence, enabling privileged actions.
     */
    match /roles_admin/{uid} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == uid && request.auth.token.email == 'gustavoportofeliz@gmail.com';
        allow update: if false;
        allow delete: if false;
    }
  }
}