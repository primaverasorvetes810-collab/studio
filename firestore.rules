/**
 * @fileoverview Firestore Security Rules for Primavera Delivery App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, shopping carts, orders).
 * Products are publicly readable but only admins can create, update, or delete products.
 * Admin privileges are granted by the existence of a document in the `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts, accessible only by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: Orders, accessible only by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Order items, accessible by anyone.
 * - /orders/{orderId}/payments/{paymentId}: Payments, accessible by anyone.
 * - /roles_admin/{uid}: Admin privileges, grants admin rights if a document exists with the user's uid.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Read-only collections are explicitly marked.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced via path-based rules (e.g., /users/{userId}/...).
 * - Admin status is determined by checking the existence of a document in `/roles_admin/{uid}`, avoiding complex role lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner (user).
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user ID matches the request's auth UID, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner and the resource exists.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     * @example isExistingOwner('someUserId')
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{uid}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create a user document with ID 'dmmCAWczXHg9aopFS5r1PH9iOgT2'.
     * @deny (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' cannot create a user document with ID 'anotherUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /products/{productId} documents.
     * @path /products/{productId}
     * @allow (get) - Any user can read any product.
     * @allow (create) - An admin user can create a product.
     * @deny (create) - A non-admin user cannot create a product.
     * @principle Public read access, admin-only write access.
     */
    match /products/{productId} {
      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/shoppingCarts/{cartId} documents.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create a shopping cart document with any ID under their user document.
     * @deny (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' cannot create a shopping cart document under another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} documents.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create a cart item document with any ID under their shopping cart document.
     * @deny (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' cannot create a cart item document under another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/orders/{orderId} documents.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create an order document with any ID under their user document.
     * @deny (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' cannot create an order document under another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /orders/{orderId}/orderItems/{orderItemId} documents.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for /orders/{orderId}/payments/{paymentId} documents.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for /roles_admin/{uid} documents.
     * @path /roles_admin/{uid}
     * @allow (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' can create an admin role document with ID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' to grant themselves admin access.
     * @deny (create) - User with UID 'dmmCAWczXHg9aopFS5r1PH9iOgT2' cannot create an admin role document with ID 'anotherUserId' to grant another user admin access.
     * @principle Only the user can grant themselves admin access.
     */
    match /roles_admin/{uid} {
      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if isSignedIn() && request.auth.uid == uid && resource != null;
    }
  }
}