/**
 * @file Firestore Security Rules for Primavera Delivery Application
 * @corePhilosophy This ruleset enforces a user-ownership model for personal data (users, shopping carts, orders)
 *   and restricts write access to product-related data to admins only. Public read access is granted for product
 *   information.
 * @dataStructure The database is structured with user-specific data nested under `/users/{userId}`.
 *   Product groups and products are stored in top-level collections (`/productGroups`, `/products`).
 *   Orders and Payments are stored under the `/orders/{orderId}` path.
 * @keySecurityDecisions
 *   - User listing is denied to prevent information disclosure.
 *   - Admin privileges are determined by the existence of a document in the `/roles_admin/{uid}` collection.
 *   - Read-only access for `/productGroups` and `/products`.
 *   - Strict ownership checks for user-related data, ensuring only the authenticated user can access their own data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'CVag8Tp34bMHI9PxhGLJx8T7Jg62' can create their own profile.
     *   `auth.uid` is 'CVag8Tp34bMHI9PxhGLJx8T7Jg62', and `request.resource.data.id` is 'CVag8Tp34bMHI9PxhGLJx8T7Jg62'.
     * @deny (create) User 'DIFFERENT_UID' cannot create a profile with `userId` 'CVag8Tp34bMHI9PxhGLJx8T7Jg62'.
     * @principle Enforces document ownership and validates relational integrity on create and update.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /productGroups/{productGroupId} collection.
     * @path /productGroups/{productGroupId}
     * @allow (get, list) Anyone can read product groups.
     * @allow (create, update, delete) Only admins can modify product groups.
     * @deny (create, update, delete) Non-admins cannot modify product groups.
     * @principle Public read access, admin-only write access.
     */
    match /productGroups/{productGroupId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read products.
     * @allow (create, update, delete) Only admins can modify products.
     * @deny (create, update, delete) Non-admins cannot modify products.
     * @principle Public read access, admin-only write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCarts/{cartId} collection.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User 'CVag8Tp34bMHI9PxhGLJx8T7Jg62' can create their own shopping cart.
     *   `auth.uid` is 'CVag8Tp34bMHI9PxhGLJx8T7Jg62', and `request.resource.data.userId` is 'CVag8Tp34bMHI9PxhGLJx8T7Jg62'.
     * @deny (create) User 'DIFFERENT_UID' cannot create a shopping cart with `userId` 'CVag8Tp34bMHI9PxhGLJx8T7Jg62'.
     * @principle Enforces document ownership and validates relational integrity on create and update.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} collection.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User 'CVag8Tp34bMHI9PxhGLJx8T7Jg62' can create a cart item in their own cart.
     * @deny (create) User 'DIFFERENT_UID' cannot create a cart item in another user's cart.
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User 'CVag8Tp34bMHI9PxhGLJx8T7Jg62' can create their own order.
     *   `auth.uid` is 'CVag8Tp34bMHI9PxhGLJx8T7Jg62', and `request.resource.data.userId` is 'CVag8Tp34bMHI9PxhGLJx8T7Jg62'.
     * @deny (create) User 'DIFFERENT_UID' cannot create an order with `userId` 'CVag8Tp34bMHI9PxhGLJx8T7Jg62'.
     * @principle Enforces document ownership and validates relational integrity on create.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders/{orderId}/orderItems/{orderItemId} collection.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if true;
      allow list: if true; // TODO: Restrict listing to admins or the order owner.

      allow create: if isAdmin(); // TODO: Restrict creation to authorized services.
      allow update: if isAdmin() && resource != null; // TODO: Restrict updates to authorized services.
      allow delete: if isAdmin() && resource != null; // TODO: Restrict deletion to authorized services.
    }

    /**
     * @description Rules for the /orders/{orderId}/payments/{paymentId} collection.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if true;
      allow list: if true; // TODO: Restrict listing to admins or the order owner.

      allow create: if isAdmin(); // TODO: Restrict creation to authorized services.
      allow update: if isAdmin() && resource != null; // TODO: Restrict updates to authorized services.
      allow delete: if isAdmin() && resource != null; // TODO: Restrict deletion to authorized services.
    }

      /**
     * @description Rules for the /roles_admin/{uid} collection.
     * @path /roles_admin/{uid}
     * @allow (get) Admins can read their own admin profile.
     * @allow (create) Only admins can create an admin document for themselves. This should ideally be done via a trusted backend.
     * @principle  Admin privileges are determined by the existence of a document in this collection.
     */
    match /roles_admin/{uid} {
        allow get: if isAdmin();
        allow list: if false;

        allow create: if request.auth.uid == uid && isAdmin();
        allow update: if false;
        allow delete: if false;
    }
  }
}