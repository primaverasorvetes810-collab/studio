/**
 * @fileoverview Firestore Security Rules for Primavera Delivery.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data (profiles, shopping carts, orders).
 * Product and ProductGroup data are publicly readable but require administrative privileges for modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /productGroups/{productGroupId}: Stores categories of products.
 * - /products/{productId}: Stores individual product details.
 * - /users/{userId}/shoppingCarts/{cartId}: Stores shopping carts belonging to a user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Stores items within a shopping cart.
 * - /users/{userId}/orders/{orderId}: Stores order history for each user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Stores items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Stores payment information for an order.
 * - /roles_admin/{uid}: A collection whose documents indicate administrative privileges. The existence of a document for a user grants them admin rights.
 *
 * Key Security Decisions:
 * - Strict user-ownership: Users can only access their own profile data, shopping carts, and orders.
 * - Public product catalog: Product and ProductGroup data are publicly readable to facilitate browsing.
 * - No user listing: Listing all users is disallowed to protect user privacy.
 * - Admin role via document existence: Administrative privileges are determined by the presence of a document in the `/roles_admin/{uid}` collection.
 *
 * Denormalization for Authorization:
 * - User-specific data (shopping carts, orders) are nested under /users/{userId} to leverage path-based authorization.
 * - The `groupId` field is denormalized onto the `Product` entity, facilitating efficient queries and security rules for product group access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner. Useful for update/delete operations.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user exists and is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has administrative privileges.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     *     Request: auth.uid = "user123", request.resource.data.id = "user123"
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     *     Request: auth.uid = "user123", userId = "user123"
     * @deny (create) Signed-in user attempts to create a profile for another user.
     *     Request: auth.uid = "user123", request.resource.data.id = "user456"
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     *     Request: auth.uid = "user123", userId = "user456"
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product groups.
     * @path /productGroups/{productGroupId}
     * @allow (get, list) Any user can read product groups.
     * @allow (create, update, delete) Only admins can modify product groups.
     * @deny (create, update, delete) Non-admin user attempts to modify product groups.
     * @principle Public read access with admin-only write access.
     */
    match /productGroups/{productGroupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get, list) Any user can read products.
     * @allow (create, update, delete) Only admins can modify products.
     * @deny (create, update, delete) Non-admin user attempts to modify products.
     * @principle Public read access with admin-only write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) Signed-in user creates their own shopping cart.
     *     Request: auth.uid = "user123", userId = "user123", request.resource.data.userId = "user123"
     * @allow (get, update, delete) Signed-in user accesses their own shopping cart.
     *     Request: auth.uid = "user123", userId = "user123"
     * @deny (create) Signed-in user attempts to create a shopping cart for another user.
     *     Request: auth.uid = "user123", userId = "user456", request.resource.data.userId = "user456"
     * @deny (get, update, delete) Signed-in user attempts to access another user's shopping cart.
     *     Request: auth.uid = "user123", userId = "user456"
     * @principle Enforces document ownership for all operations on shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (get, create, update, delete, list) Signed-in user accesses their own cart items.
     *     Request: auth.uid = "user123", userId = "user123"
     * @deny (get, create, update, delete, list) Signed-in user attempts to access another user's cart items.
     *     Request: auth.uid = "user123", userId = "user456"
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) Signed-in user creates their own order.
     *     Request: auth.uid = "user123", userId = "user123", request.resource.data.userId = "user123"
     * @allow (get, update, delete) Signed-in user accesses their own orders.
     *     Request: auth.uid = "user123", userId = "user123"
     * @deny (create) Signed-in user attempts to create an order for another user.
     *     Request: auth.uid = "user123", userId = "user456", request.resource.data.userId = "user456"
     * @deny (get, update, delete) Signed-in user attempts to access another user's orders.
     *     Request: auth.uid = "user123", userId = "user456"
     * @principle Enforces document ownership for all operations on orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, create, update, delete, list) Only admins can access order items.
     * @deny (get, create, update, delete, list) Non-admin user attempts to access order items.
     * @principle Restricts access to order items to administrators only.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, create, update, delete, list) Only admins can access payments.
     * @deny (get, create, update, delete, list) Non-admin user attempts to access payments.
     * @principle Restricts access to payments to administrators only.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (get, create, update, delete, list) Only admins can manage admin roles.
     * @deny (get, create, update, delete, list) Non-admin user attempts to manage admin roles.
     * @principle Restricts management of admin roles to administrators only.
     */
    match /roles_admin/{uid} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin() && request.auth.uid == uid;
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}