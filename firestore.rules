/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data and related resources (shopping carts, orders) are strictly controlled by the owning user.
 * Product data is publicly readable but only writable by administrators.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Documents indicating admin privileges; document ID is the user's UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Admin privileges are determined by the presence of a document in the /roles_admin/{uid} collection.
 * - Data schema validation is relaxed in this prototype to allow for rapid iteration.  However, fields used for authorization are validated.
 *
 * Denormalization for Authorization:
 * The data structure uses path-based ownership (e.g., /users/{userId}/shoppingCarts/{cartId}) to avoid costly `get()` calls in the security rules.  The presence of a document in `/roles_admin/{uid}` indicates admin rights.
 *
 * Structural Segregation:
 * Publicly readable product data is stored in the top-level /products collection, while private user data is stored under /users/{userId}.  This avoids the need for a boolean flag and ensures efficient list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, where resource.data has the 'id' field.
     * @param {string} userId The user ID to check against the resource's 'id' field.
     * @return {bool} True if the user is the owner, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     *              Combines the ownership check with the existence check.
     * @param {string} userId The user ID to check against the resource's 'id' field.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     * @example isExistingOwner('someUserId')
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User LfaT495EQeabUDWcQneLlM2R3b72 can create their own profile if request.auth.uid == userId.
     * @allow (get) User LfaT495EQeabUDWcQneLlM2R3b72 can read their own profile.
     * @allow (update) User LfaT495EQeabUDWcQneLlM2R3b72 can update their own profile.
     * @allow (delete) User LfaT495EQeabUDWcQneLlM2R3b72 can delete their own profile.
     * @deny (create) User abc cannot create a profile for user LfaT495EQeabUDWcQneLlM2R3b72.
     * @principle Enforces document ownership for writes; Restricts access to a user's own data tree; Validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get) Any user can read any product.
     * @allow (create) Only admins can create products.
     * @allow (update) Only admins can update products.
     * @allow (delete) Only admins can delete products.
     * @deny (create) Regular user cannot create a product.
     * @principle Allows public read access; Restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCarts/{cartId} collection.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User LfaT495EQeabUDWcQneLlM2R3b72 can create a cart for themselves if request.auth.uid == userId.
     * @allow (get) User LfaT495EQeabUDWcQneLlM2R3b72 can read their own cart.
     * @allow (update) User LfaT495EQeabUDWcQneLlM2R3b72 can update their own cart.
     * @allow (delete) User LfaT495EQeabUDWcQneLlM2R3b72 can delete their own cart.
     * @deny (create) User abc cannot create a cart for user LfaT495EQeabUDWcQneLlM2R3b72.
     * @principle Enforces document ownership for writes; Restricts access to a user's own data.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} collection.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User LfaT495EQeabUDWcQneLlM2R3b72 can create a cart item in their own cart.
     * @allow (get) User LfaT495EQeabUDWcQneLlM2R3b72 can read a cart item in their own cart.
     * @allow (update) User LfaT495EQeabUDWcQneLlM2R3b72 can update a cart item in their own cart.
     * @allow (delete) User LfaT495EQeabUDWcQneLlM2R3b72 can delete a cart item in their own cart.
     * @deny (create) User abc cannot create a cart item in user LfaT495EQeabUDWcQneLlM2R3b72's cart.
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.shoppingCartId == cartId;
      allow update: if isExistingOwner(userId) && request.resource.data.shoppingCartId == cartId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User LfaT495EQeabUDWcQneLlM2R3b72 can create an order for themselves.
     * @allow (get) User LfaT495EQeabUDWcQneLlM2R3b72 can read their own order.
     * @allow (update) User LfaT495EQeabUDWcQneLlM2R3b72 can update their own order.
     * @allow (delete) User LfaT495EQeabUDWcQneLlM2R3b72 can delete their own order.
     * @deny (create) User abc cannot create an order for user LfaT495EQeabUDWcQneLlM2R3b72.
     * @principle Enforces document ownership for writes; Restricts access to a user's own data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders/{orderId}/orderItems/{orderItemId} collection.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) Anyone can read order items.
     * @allow (create) Anyone can create order items.
     * @allow (update) Anyone can update order items.
     * @allow (delete) Anyone can delete order items.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Rules for the /orders/{orderId}/payments/{paymentId} collection.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get) Anyone can read payment information.
     * @allow (create) Anyone can create payment information.
     * @allow (update) Anyone can update payment information.
     * @allow (delete) Anyone can delete payment information.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Rules for the /roles_admin/{uid} collection.
     * @path /roles_admin/{uid}
     * @allow (create) Only the user themselves can create the admin document, ensuring they are authenticated.
     * @allow (get) Any authenticated user can check for the existence of an admin document.
     * @allow (update) No updates allowed; admin status is determined solely by document existence.
     * @allow (delete) Only the user themselves can delete the admin document, effectively revoking their own admin privileges.
     * @deny (create) Another user cannot create an admin document for someone else.
     * @principle Existence of a document grants admin rights; Restricts management of admin status to the user themselves.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(uid) && request.resource.data.id == uid;
      allow update: if false;
      allow delete: if isExistingOwner(uid);
    }
  }
}