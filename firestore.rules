
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
    
    // Regra para a coleção de administradores
    match /roles_admin/{uid} {
      // Qualquer usuário autenticado pode se tornar um administrador se a coleção de administradores estiver vazia.
      // Depois que o primeiro administrador for criado, apenas outros administradores podem adicionar novos.
      allow create: if size(get(/databases/$(database)/documents/roles_admin).data) == 0 || isAdmin();
      allow read, delete: if isAdmin();
    }

    // Regras para a coleção de usuários
    match /users/{userId} {
      allow read, create, update: if isSignedIn() && isOwner(userId);
      // Administradores podem ler a lista de todos os usuários para gerenciamento
      allow list: if isAdmin();

      // Regras para subcoleções do usuário
      match /orders/{orderId} {
        allow read, create: if isSignedIn() && isOwner(userId);
        // Administradores podem ler e atualizar QUALQUER pedido
        allow list, update: if isAdmin();
      }

      match /shoppingCarts/{cartId} {
        allow read, create, update, delete: if isSignedIn() && isOwner(userId);

        match /cartItems/{cartItemId} {
          allow read, create, update, delete: if isSignedIn() && isOwner(userId);
        }
      }
    }
    
    // Produtos e Grupos de Produtos
    match /productGroups/{productGroupId} {
      allow read: if true;
      allow write: if isAdmin(); // Apenas administradores podem escrever
    }

    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin(); // Apenas administradores podem escrever
    }
  }
}
