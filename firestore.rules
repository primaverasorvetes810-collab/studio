/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * and restricts write access to certain collections to administrators.
 * Public read access is granted for product information.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable, admin-writeable.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Cart items within a user's shopping cart.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.
 * - /roles_admin/{uid}: Admin role assignments. Document existence confers admin rights.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Products are publicly readable but only admins can create, update, or delete them.
 * - Admin rights are determined by the existence of a document in /roles_admin/{uid}.
 * - User listing is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Admin status is checked by looking up the admin document directly in the `isAdmin()` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in, is owner, and resource exists).
     *              Useful for update and delete operations.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their UID in the roles_admin collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a document at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, and delete the document at /users/user123.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /products/{productId} documents.
     * @path /products/{productId}
     * @allow (get, list) - Any user (signed in or not) can read product information.
     * @allow (create) - Only admins can create product documents.
     * @allow (update, delete) - Only admins can update or delete product documents.
     * @deny (create) - Non-admins cannot create product documents.
     * @deny (update, delete) - Non-admins cannot update or delete product documents.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/shoppingCarts/{cartId} documents.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create, get, update, delete) - User with UID 'user123' can create, get, update, and delete their shopping cart document at /users/user123/shoppingCarts/cart456.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot create, get, update, and delete a shopping cart document at /users/user123/shoppingCarts/cart456.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} documents.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create, get, update, delete) - User with UID 'user123' can create, get, update, and delete cart items in their shopping cart.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot create, get, update, and delete cart items in another user's shopping cart.
     * @principle Enforces document ownership inherited from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/orders/{orderId} documents.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete) - User with UID 'user123' can create, get, update, and delete their order document.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot create, get, update, and delete an order document for user 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /orders/{orderId}/orderItems/{orderItemId} documents.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) - Any signed in user can read order items for a given order.
     * @allow (create) - Any signed in user can create an order item if they are the order owner.
     * @allow (update, delete) - Any signed in user can update or delete an order item if they are the order owner.
     * @principle Enforces that only the owner of an order can manage its items.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow create: if isSignedIn(); // TODO: Add order ownership validation once order has ownerId.
       allow update: if isSignedIn() && resource != null; // TODO: Add order ownership validation once order has ownerId.
       allow delete: if isSignedIn() && resource != null; // TODO: Add order ownership validation once order has ownerId.
    }

    /**
     * @description Rules for /orders/{orderId}/payments/{paymentId} documents.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) - Any signed in user can read payments for a given order.
     * @allow (create) - Any signed in user can create a payment if they are the order owner.
     * @allow (update, delete) - Any signed in user can update or delete a payment if they are the order owner.
     * @principle Enforces that only the owner of an order can manage its payments.
     */
    match /orders/{orderId}/payments/{paymentId} {
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow create: if isSignedIn(); // TODO: Add order ownership validation once order has ownerId.
       allow update: if isSignedIn() && resource != null; // TODO: Add order ownership validation once order has ownerId.
       allow delete: if isSignedIn() && resource != null; // TODO: Add order ownership validation once order has ownerId.
    }

    /**
     * @description Rules for /roles_admin/{uid} documents.
     * @path /roles_admin/{uid}
     * @allow (create, get, update, delete) - Only the admin themselves (verified by UID) can manage their admin role document.
     * @deny (create, get, update, delete) - Non-admins cannot create, get, update or delete admin role documents.
     * @principle Confers admin rights based on document existence.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if isAdmin() && request.auth.uid == uid && resource != null;
    }
  }
}