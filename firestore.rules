/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, shopping carts, orders). Product data is publicly readable but
 * only writable by administrators.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /productGroups/{productGroupId}: Product categories, publicly readable, admin-writable.
 * - /products/{productId}: Products, publicly readable, admin-writable.
 * - /users/{userId}/shoppingCarts/{cartId}: User's shopping carts, accessible only by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items in a cart, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User's orders, accessible only by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items in an order.  No rules are set for the parent `orders` collection.
 * - /orders/{orderId}/payments/{paymentId}: Payments for an order.  No rules are set for the parent `orders` collection.
 * - /roles_admin/{uid}:  Admin role, the existence of a document with a UID grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Product data is publicly readable to facilitate browsing.
 * - Only authenticated admins can modify product data.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 *  - User-specific subcollections (shoppingCarts, orders) enforce ownership via path-based rules (isOwner(userId)).  The rules validate that the `userId` in the path matches `request.auth.uid`.
 *
 * Structural Segregation:
 * - Public product data is stored in top-level collections (/productGroups, /products) separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the resource.
     * @param {string} userId The user ID to compare against the resource data and the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the request is made by an admin user.
     * @returns {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (update) User with UID 'user456' cannot update user profile 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only the user can read/write their own profile.
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product groups.
     * @path /productGroups/{productGroupId}
     * @allow (get) Any user can read product group 'group1'.
     * @allow (create) Admin user can create a product group.
     * @deny (update) Non-admin user cannot update product group 'group1'.
     * @principle Publicly readable, admin-only writable.
     */
    match /productGroups/{productGroupId} {
      // Anyone can read product groups.
      allow get, list: if true;
      // Only admins can create, update, and delete product groups.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get) Any user can read product 'product1'.
     * @allow (create) Admin user can create a product.
     * @deny (update) Non-admin user cannot update product 'product1'.
     * @principle Publicly readable, admin-only writable.
     */
    match /products/{productId} {
      // Anyone can read products.
      allow get, list: if true;
      // Only admins can create, update, and delete products.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with UID 'user123' can create a cart if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their cart.
     * @deny (update) User with UID 'user456' cannot update cart 'cart123' of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      // Only the user can read/write their own shopping carts.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create) User with UID 'user123' can create a cart item in their cart.
     * @allow (get) User with UID 'user123' can read a cart item in their cart.
     * @deny (update) User with UID 'user456' cannot update a cart item in cart 'cart123' of user 'user123'.
     * @principle Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      // Only the user can read/write their own cart items.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with UID 'user123' can create an order if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their order.
     * @deny (update) User with UID 'user456' cannot update order 'order123' of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      // Only the user can read/write their own orders.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) Any user can read an order item (assuming they can access the parent order - no rule for parent order validation).
     * @allow (create) Any user can create an order item (assuming they can access the parent order - no rule for parent order validation).
     *
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      //Anyone can read and write order items since the parent order is not validated.
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     */
    match /orders/{orderId}/payments/{paymentId} {
      //Anyone can read and write payments since the parent order is not validated.
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) Only an admin can grant another user admin rights.
     * @allow (get) Any user can check if a user has admin rights.
     * @deny (update) No one can update an admin role document (admin roles are created and deleted only).
     * @principle Admin role management is restricted to admins.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn(); // Any signed-in user can check for admin status.
      allow list: if false; // Prevent listing of all admins.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}