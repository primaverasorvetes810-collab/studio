/**
 * @fileoverview Firestore Security Rules for Primavera Delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, combining user-based ownership with public read access for certain collections, and admin-only write access for others. User data is strictly controlled by the individual user. Public data (e.g., product catalog) is readable by everyone but modifiable only by administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /productGroups/{productGroupId}: Stores product groups, publicly readable but admin-writable.
 * - /products/{productId}: Stores product information, publicly readable but admin-writable.  Products are associated with a group via the 'groupId' field.
 * - /users/{userId}/shoppingCarts/{cartId}: Stores shopping carts, accessible only by the user.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Stores cart items, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: Stores order information, accessible only by the user.
 * - /orders/{orderId}/orderItems/{orderItemId}: Stores order items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Stores payments for an order.
 * - /roles_admin/{uid}: Indicates administrative privileges. Document ID is the user's UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to the /productGroups and /products collections to enable browsing without authentication.
 * - Administrative privileges are determined by the existence of a document in the `/roles_admin` collection.
 *
 * Denormalization for Authorization:
 * - Product documents have a `groupId` field, which is used for efficient querying but also simplifies rules by avoiding the need to traverse nested paths.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if a user is an existing owner, verifying both ownership and document existence.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Protects against modifying or deleting non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has administrative privileges.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Grants admin access based on document existence in `/roles_admin`.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     * @allow (get, update, delete) User with UID 'user123' accesses their own profile.
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456'.
     * @deny (get, update, delete) User with UID 'user123' tries to access the profile of 'user456'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product groups.
     * @path /productGroups/{productGroupId}
     * @allow (get, list) Any user can read product group information.
     * @allow (create, update, delete) Admin user can modify product groups.
     * @deny (create, update, delete) Non-admin user attempts to modify product groups.
     * @principle Publicly readable, admin-only write access.
     */
    match /productGroups/{productGroupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @allow (create, update, delete) Admin user can modify products.
     * @deny (create, update, delete) Non-admin user attempts to modify products.
     * @principle Publicly readable, admin-only write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (create) User with UID 'user123' creates their own shopping cart.
     * @allow (get, update, delete) User with UID 'user123' accesses their own shopping cart.
     * @deny (create) User with UID 'user123' tries to create a shopping cart for 'user456'.
     * @deny (get, update, delete) User with UID 'user123' tries to access the shopping cart of 'user456'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (create, get, update, delete) User with UID 'user123' manages their own cart items.
     * @deny (create, get, update, delete) User with UID 'user123' tries to manage cart items of 'user456'.
     * @principle Inherits ownership from the parent shopping cart, enforcing user-based access.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete) User with UID 'user123' manages their own orders.
     * @deny (create, get, update, delete) User with UID 'user123' tries to manage orders of 'user456'.
     * @principle Enforces document ownership and restricts access to a user's own order history.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @principle Order items inherit access control from their parent order.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     * @principle Payments inherit access control from their parent order.
     */
    match /orders/{orderId}/payments/{paymentId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) A user can create their own admin role if they are an admin.
     * @allow (get) Any authenticated user can check if they are an admin.
     * @deny (create) A non-admin user cannot create an admin role.
     * @principle Grants admin access based on document existence.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}