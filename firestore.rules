/**
 * @fileoverview Firestore Security Rules for Primavera Delivery App
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User-specific data is strictly controlled
 * by ownership, while product and product group data is publicly readable but admin-writeable.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /productGroups/{productGroupId}: Product categories, publicly readable, admin-writeable.
 * - /products/{productId}: Products, publicly readable, admin-writeable. Each product has a `groupId` for categorization.
 * - /users/{userId}/shoppingCarts/{cartId}: User-specific shopping carts.
 * - /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}: Items within a user's cart.
 * - /users/{userId}/orders/{orderId}: User-specific order history.
 * - /orders/{orderId}/orderItems/{orderItemId}: Items within a specific order.
 * - /orders/{orderId}/payments/{paymentId}: Payment information for an order.
 * - /roles_admin/{uid}: Documents indicating admin privileges; document ID is the user's UID.
 *
 * Key Security Decisions:
 * - User data is strictly private and accessible only to the authenticated user.
 * - Product and ProductGroup data is publicly readable to facilitate browsing.
 * - Admin privileges are determined by the presence of a document in the `/roles_admin` collection.
 * - Listing of all documents in `/orders` is denied to regular users.
 *
 * Denormalization for Authorization:
 * - Product documents include a `groupId` field to avoid needing to traverse or query `productGroups` for read access.
 *
 * Structural Segregation:
 * - User-specific data (shopping carts, orders) is stored under the /users/{userId} path to ensure clear ownership and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource, based on the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the resource, based on the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership-based access control and resource existence.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the `/roles_admin` collection with the user's UID as the document ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Grants elevated permissions to administrators.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (get) User with UID 'user456' cannot read user profile 'user123'.
     * @deny (create) User with UID 'user456' cannot create user profile 'user123'.
     * @deny (update) User with UID 'user456' cannot update user profile 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete user profile 'user123'.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for product groups.
     * @path /productGroups/{productGroupId}
     * @allow (get) Any user can read product groups.
     * @allow (create) Admin user can create product groups.
     * @allow (update) Admin user can update product groups.
     * @allow (delete) Admin user can delete product groups.
     * @deny (create) Regular user cannot create product groups.
     * @deny (update) Regular user cannot update product groups.
     * @deny (delete) Regular user cannot delete product groups.
     * @principle Public read access with admin-only writes.
     */
    match /productGroups/{productGroupId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get) Any user can read products.
     * @allow (create) Admin user can create products.
     * @allow (update) Admin user can update products.
     * @allow (delete) Admin user can delete products.
     * @deny (create) Regular user cannot create products.
     * @deny (update) Regular user cannot update products.
     * @deny (delete) Regular user cannot delete products.
     * @principle Public read access with admin-only writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (get) User with UID 'user123' can read their own shopping cart.
     * @allow (create) User with UID 'user123' can create their own shopping cart.
     * @allow (update) User with UID 'user123' can update their own shopping cart.
     * @allow (delete) User with UID 'user123' can delete their own shopping cart.
     * @deny (get) User with UID 'user456' cannot read shopping cart 'cart123' of user 'user123'.
     * @deny (create) User with UID 'user456' cannot create shopping cart 'cart123' for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update shopping cart 'cart123' for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete shopping cart 'cart123' for user 'user123'.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for cart items.
     * @path /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId}
     * @allow (get) User with UID 'user123' can read their own cart item in their own shopping cart.
     * @allow (create) User with UID 'user123' can create a cart item in their own shopping cart.
     * @allow (update) User with UID 'user123' can update their own cart item in their own shopping cart.
     * @allow (delete) User with UID 'user123' can delete their own cart item in their own shopping cart.
     * @deny (get) User with UID 'user456' cannot read cart item 'item123' in shopping cart 'cart123' of user 'user123'.
     * @deny (create) User with UID 'user456' cannot create cart item 'item123' in shopping cart 'cart123' for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update cart item 'item123' in shopping cart 'cart123' for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete cart item 'item123' in shopping cart 'cart123' for user 'user123'.
     * @principle Enforces document ownership for writes. Inherits ownership from the parent shopping cart.
     */
    match /users/{userId}/shoppingCarts/{cartId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get) User with UID 'user123' can read their own order.
     * @allow (create) User with UID 'user123' can create their own order.
     * @allow (update) User with UID 'user123' can update their own order.
     * @allow (delete) User with UID 'user123' can delete their own order.
     * @deny (get) User with UID 'user456' cannot read order 'order123' of user 'user123'.
     * @deny (create) User with UID 'user456' cannot create order 'order123' for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update order 'order123' for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete order 'order123' for user 'user123'.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get) Any authenticated user can read order items.
     * @allow (create) Admin user can create order items.
     * @allow (update) Admin user can update order items.
     * @allow (delete) Admin user can delete order items.
     * @deny (create) Regular user cannot create order items.
     * @deny (update) Regular user cannot update order items.
     * @deny (delete) Regular user cannot delete order items.
     * @principle Admin-only writes, public reads.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for payments.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get) Any authenticated user can read payments.
     * @allow (create) Admin user can create payments.
     * @allow (update) Admin user can update payments.
     * @allow (delete) Admin user can delete payments.
     * @deny (create) Regular user cannot create payments.
     * @deny (update) Regular user cannot update payments.
     * @deny (delete) Regular user cannot delete payments.
     * @principle Admin-only writes, public reads.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (get) Admin user can read their own admin role.
     * @allow (create) Admin user can create their own admin role.
     * @allow (update) Admin user can update their own admin role.
     * @allow (delete) Admin user can delete their own admin role.
     * @deny (get) Regular user cannot read admin roles.
     * @deny (create) Regular user cannot create admin roles.
     * @deny (update) Regular user cannot update admin roles.
     * @deny (delete) Regular user cannot delete admin roles.
     * @principle Restricts access to admin roles to admin users.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
    
    /**
     * @description Prevents listing all order documents. This rule denies the 'list' operation on the /orders collection.
     * @path /orders
     * @allow None. Listing all orders is forbidden.
     * @deny (list) Any user (including admins) cannot list all documents in the /orders collection.
     * @principle Prevents unauthorized access to all orders.  Orders should be accessed through the user's order subcollection.
     */
    match /orders {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}